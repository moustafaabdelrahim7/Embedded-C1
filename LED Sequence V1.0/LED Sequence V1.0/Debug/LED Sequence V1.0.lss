
LED Sequence V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001274  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000819  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000831  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d0  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f55  00000000  00000000  000030e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Button_INIT>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
  6c:	88 32       	cpi	r24, 0x28	; 40
  6e:	28 f4       	brcc	.+10     	; 0x7a <Button_INIT+0xe>
	{
		return INVALID_BUTTON_PIN_NUMBER;
	}
	else
	{
	DIO_INITPIN(PIN,INPLUP);
  70:	62 e0       	ldi	r22, 0x02	; 2
  72:	0e 94 12 01 	call	0x224	; 0x224 <DIO_INITPIN>
	return VALID_BUTTON;
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_BUTTON_PORT;
  7a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
	DIO_INITPIN(PIN,INPLUP);
	return VALID_BUTTON;
	}
}
  7c:	08 95       	ret

0000007e <Button_read>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
  7e:	88 32       	cpi	r24, 0x28	; 40
  80:	20 f4       	brcc	.+8      	; 0x8a <Button_read+0xc>
	{
		return INVALID_BUTTON_PIN_NUMBER;
	}
	else
	{
	DIO_READPIN(PIN,VOLT);
  82:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_READPIN>
	return VALID_BUTTON;
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_BUTTON_PORT;
  8a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
	DIO_READPIN(PIN,VOLT);
	return VALID_BUTTON;
	}
  8c:	08 95       	ret

0000008e <LED_INIT>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  8e:	88 32       	cpi	r24, 0x28	; 40
  90:	28 f4       	brcc	.+10     	; 0x9c <LED_INIT+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_INITPIN(PIN,OUTPUT);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	0e 94 12 01 	call	0x224	; 0x224 <DIO_INITPIN>
	 return VALID_LED;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  9c:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_INITPIN(PIN,OUTPUT);
	 return VALID_LED;
	 }
 }
  9e:	08 95       	ret

000000a0 <LED_ON>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  a0:	88 32       	cpi	r24, 0x28	; 40
  a2:	28 f4       	brcc	.+10     	; 0xae <LED_ON+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_WRITEPIN(PIN,HIGH);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	0e 94 14 02 	call	0x428	; 0x428 <DIO_WRITEPIN>
	 return VALID_LED;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  ae:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_WRITEPIN(PIN,HIGH);
	 return VALID_LED;
	 }
 }
  b0:	08 95       	ret

000000b2 <LED_OFF>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  b2:	88 32       	cpi	r24, 0x28	; 40
  b4:	28 f4       	brcc	.+10     	; 0xc0 <LED_OFF+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_WRITEPIN(PIN,LOW);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	0e 94 14 02 	call	0x428	; 0x428 <DIO_WRITEPIN>
	 return VALID_LED;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  c0:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_WRITEPIN(PIN,LOW);
	 return VALID_LED;
	 }
  c2:	08 95       	ret

000000c4 <main>:
#include "HAL/LED/LED-Interface.h"
#include "util/delay.h"
#define   F_CPU 8000000UL

int main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	1f 92       	push	r1
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	/**********intializing hal*************/
	LED_INIT(pina0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina2);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina3);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	Button_INIT(pinc1);
  e6:	81 e1       	ldi	r24, 0x11	; 17
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <Button_INIT>
	/*****************variables***********/
	uint8_t VOLT=0;
  ec:	19 82       	std	Y+1, r1	; 0x01
	uint8_t FLAG=0;
  ee:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if(FLAG==7)
			{
				LED_OFF(pina3);
				_delay_ms(300);
				FLAG=0;
  f0:	00 e0       	ldi	r16, 0x00	; 0
			}
			else if(FLAG==6)
			{
				LED_OFF(pina2);
				_delay_ms(300);
				FLAG++;
  f2:	0f 2e       	mov	r0, r31
  f4:	f7 e0       	ldi	r31, 0x07	; 7
  f6:	cf 2e       	mov	r12, r31
  f8:	f0 2d       	mov	r31, r0
			}
			else if(FLAG==5)
			{
				LED_OFF(pina1);
				_delay_ms(300);
				FLAG++;
  fa:	0f 2e       	mov	r0, r31
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	df 2e       	mov	r13, r31
 100:	f0 2d       	mov	r31, r0
			}
			else if(FLAG==4)
			{
				LED_OFF(pina0);
				_delay_ms(300);
				FLAG++;
 102:	0f 2e       	mov	r0, r31
 104:	f5 e0       	ldi	r31, 0x05	; 5
 106:	ef 2e       	mov	r14, r31
 108:	f0 2d       	mov	r31, r0
			}
			else if(FLAG==3)
			{
				LED_ON(pina3);
				_delay_ms(300);
				FLAG++;
 10a:	68 94       	set
 10c:	ff 24       	eor	r15, r15
 10e:	f2 f8       	bld	r15, 2
	uint8_t FLAG=0;
	
	while(1)
	{
		
		Button_read(pinc1,&VOLT);
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	81 e1       	ldi	r24, 0x11	; 17
 118:	0e 94 3f 00 	call	0x7e	; 0x7e <Button_read>
		if(!VOLT)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	81 11       	cpse	r24, r1
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x4c>
		{
			if(FLAG==0)
 122:	11 11       	cpse	r17, r1
 124:	0e c0       	rjmp	.+28     	; 0x142 <main+0x7e>
			{
				LED_ON(pina0);
 126:	80 2f       	mov	r24, r16
 128:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f e5       	ldi	r18, 0x5F	; 95
 12e:	8a ee       	ldi	r24, 0xEA	; 234
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x6e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x78>
 13c:	00 00       	nop
				FLAG++;
 13e:	11 e0       	ldi	r17, 0x01	; 1
 140:	e7 cf       	rjmp	.-50     	; 0x110 <main+0x4c>
				_delay_ms(300);
			}
			else if(FLAG==1)
 142:	11 30       	cpi	r17, 0x01	; 1
 144:	71 f4       	brne	.+28     	; 0x162 <main+0x9e>
			{
				LED_ON(pina1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 14c:	2f e5       	ldi	r18, 0x5F	; 95
 14e:	8a ee       	ldi	r24, 0xEA	; 234
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x8e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x98>
 15c:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 15e:	12 e0       	ldi	r17, 0x02	; 2
 160:	d7 cf       	rjmp	.-82     	; 0x110 <main+0x4c>
			}
			else if(FLAG==2)
 162:	12 30       	cpi	r17, 0x02	; 2
 164:	71 f4       	brne	.+28     	; 0x182 <main+0xbe>
			{
				LED_ON(pina2);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 16c:	2f e5       	ldi	r18, 0x5F	; 95
 16e:	8a ee       	ldi	r24, 0xEA	; 234
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xae>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xb8>
 17c:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 17e:	13 e0       	ldi	r17, 0x03	; 3
 180:	c7 cf       	rjmp	.-114    	; 0x110 <main+0x4c>
			}
			else if(FLAG==3)
 182:	13 30       	cpi	r17, 0x03	; 3
 184:	71 f4       	brne	.+28     	; 0x1a2 <main+0xde>
			{
				LED_ON(pina3);
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 18c:	2f e5       	ldi	r18, 0x5F	; 95
 18e:	8a ee       	ldi	r24, 0xEA	; 234
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xce>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xd8>
 19c:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 19e:	1f 2d       	mov	r17, r15
 1a0:	b7 cf       	rjmp	.-146    	; 0x110 <main+0x4c>
			}
			else if(FLAG==4)
 1a2:	14 30       	cpi	r17, 0x04	; 4
 1a4:	71 f4       	brne	.+28     	; 0x1c2 <main+0xfe>
			{
				LED_OFF(pina0);
 1a6:	80 2f       	mov	r24, r16
 1a8:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 1ac:	2f e5       	ldi	r18, 0x5F	; 95
 1ae:	8a ee       	ldi	r24, 0xEA	; 234
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0xee>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0xf8>
 1bc:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1be:	1e 2d       	mov	r17, r14
 1c0:	a7 cf       	rjmp	.-178    	; 0x110 <main+0x4c>
			}
			else if(FLAG==5)
 1c2:	15 30       	cpi	r17, 0x05	; 5
 1c4:	71 f4       	brne	.+28     	; 0x1e2 <main+0x11e>
			{
				LED_OFF(pina1);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 1cc:	2f e5       	ldi	r18, 0x5F	; 95
 1ce:	8a ee       	ldi	r24, 0xEA	; 234
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x10e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x118>
 1dc:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1de:	1d 2d       	mov	r17, r13
 1e0:	97 cf       	rjmp	.-210    	; 0x110 <main+0x4c>
			}
			else if(FLAG==6)
 1e2:	16 30       	cpi	r17, 0x06	; 6
 1e4:	71 f4       	brne	.+28     	; 0x202 <main+0x13e>
			{
				LED_OFF(pina2);
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 1ec:	2f e5       	ldi	r18, 0x5F	; 95
 1ee:	8a ee       	ldi	r24, 0xEA	; 234
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x12e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x138>
 1fc:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1fe:	1c 2d       	mov	r17, r12
 200:	87 cf       	rjmp	.-242    	; 0x110 <main+0x4c>
			}
			else if(FLAG==7)
 202:	17 30       	cpi	r17, 0x07	; 7
 204:	09 f0       	breq	.+2      	; 0x208 <main+0x144>
 206:	84 cf       	rjmp	.-248    	; 0x110 <main+0x4c>
			{
				LED_OFF(pina3);
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 20e:	2f e5       	ldi	r18, 0x5F	; 95
 210:	8a ee       	ldi	r24, 0xEA	; 234
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x150>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x15a>
 21e:	00 00       	nop
				_delay_ms(300);
				FLAG=0;
 220:	10 2f       	mov	r17, r16
 222:	76 cf       	rjmp	.-276    	; 0x110 <main+0x4c>

00000224 <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
 224:	98 2f       	mov	r25, r24
 226:	96 95       	lsr	r25
 228:	96 95       	lsr	r25
 22a:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
 22c:	95 30       	cpi	r25, 0x05	; 5
 22e:	08 f0       	brcs	.+2      	; 0x232 <DIO_INITPIN+0xe>
 230:	f9 c0       	rjmp	.+498    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
 232:	87 70       	andi	r24, 0x07	; 7
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
 234:	61 30       	cpi	r22, 0x01	; 1
 236:	31 f0       	breq	.+12     	; 0x244 <DIO_INITPIN+0x20>
 238:	08 f4       	brcc	.+2      	; 0x23c <DIO_INITPIN+0x18>
 23a:	a4 c0       	rjmp	.+328    	; 0x384 <DIO_INITPIN+0x160>
 23c:	62 30       	cpi	r22, 0x02	; 2
 23e:	09 f4       	brne	.+2      	; 0x242 <DIO_INITPIN+0x1e>
 240:	51 c0       	rjmp	.+162    	; 0x2e4 <DIO_INITPIN+0xc0>
 242:	ef c0       	rjmp	.+478    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		case INFREE:
		switch(PORT)
 244:	91 30       	cpi	r25, 0x01	; 1
 246:	c1 f0       	breq	.+48     	; 0x278 <DIO_INITPIN+0x54>
 248:	28 f0       	brcs	.+10     	; 0x254 <DIO_INITPIN+0x30>
 24a:	92 30       	cpi	r25, 0x02	; 2
 24c:	39 f1       	breq	.+78     	; 0x29c <DIO_INITPIN+0x78>
 24e:	93 30       	cpi	r25, 0x03	; 3
 250:	b9 f1       	breq	.+110    	; 0x2c0 <DIO_INITPIN+0x9c>
 252:	e7 c0       	rjmp	.+462    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 254:	4a b3       	in	r20, 0x1a	; 26
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_INITPIN+0x3e>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_INITPIN+0x3a>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	94 2f       	mov	r25, r20
 26c:	98 23       	and	r25, r24
 26e:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
 270:	9b b3       	in	r25, 0x1b	; 27
 272:	89 23       	and	r24, r25
 274:	8b bb       	out	0x1b, r24	; 27
			break;
 276:	d5 c0       	rjmp	.+426    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case PB:
			clear_bit(DDRB,PIN_NUM);
 278:	47 b3       	in	r20, 0x17	; 23
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	b9 01       	movw	r22, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_INITPIN+0x62>
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	8a 95       	dec	r24
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_INITPIN+0x5e>
 28a:	cb 01       	movw	r24, r22
 28c:	80 95       	com	r24
 28e:	94 2f       	mov	r25, r20
 290:	98 23       	and	r25, r24
 292:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
 294:	98 b3       	in	r25, 0x18	; 24
 296:	89 23       	and	r24, r25
 298:	88 bb       	out	0x18, r24	; 24
			break;
 29a:	c3 c0       	rjmp	.+390    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 29c:	44 b3       	in	r20, 0x14	; 20
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_INITPIN+0x86>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_INITPIN+0x82>
 2ae:	cb 01       	movw	r24, r22
 2b0:	80 95       	com	r24
 2b2:	94 2f       	mov	r25, r20
 2b4:	98 23       	and	r25, r24
 2b6:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
 2b8:	95 b3       	in	r25, 0x15	; 21
 2ba:	89 23       	and	r24, r25
 2bc:	85 bb       	out	0x15, r24	; 21
			break;
 2be:	b1 c0       	rjmp	.+354    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 2c0:	41 b3       	in	r20, 0x11	; 17
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_INITPIN+0xaa>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_INITPIN+0xa6>
 2d2:	cb 01       	movw	r24, r22
 2d4:	80 95       	com	r24
 2d6:	94 2f       	mov	r25, r20
 2d8:	98 23       	and	r25, r24
 2da:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
 2dc:	92 b3       	in	r25, 0x12	; 18
 2de:	89 23       	and	r24, r25
 2e0:	82 bb       	out	0x12, r24	; 18
			break;
 2e2:	9f c0       	rjmp	.+318    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		break;
		
		case INPLUP:
		switch(PORT)
 2e4:	91 30       	cpi	r25, 0x01	; 1
 2e6:	c1 f0       	breq	.+48     	; 0x318 <DIO_INITPIN+0xf4>
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <DIO_INITPIN+0xd0>
 2ea:	92 30       	cpi	r25, 0x02	; 2
 2ec:	39 f1       	breq	.+78     	; 0x33c <DIO_INITPIN+0x118>
 2ee:	93 30       	cpi	r25, 0x03	; 3
 2f0:	b9 f1       	breq	.+110    	; 0x360 <DIO_INITPIN+0x13c>
 2f2:	97 c0       	rjmp	.+302    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 2f4:	4a b3       	in	r20, 0x1a	; 26
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_INITPIN+0xde>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_INITPIN+0xda>
 306:	cb 01       	movw	r24, r22
 308:	96 2f       	mov	r25, r22
 30a:	90 95       	com	r25
 30c:	94 23       	and	r25, r20
 30e:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
 310:	9b b3       	in	r25, 0x1b	; 27
 312:	89 2b       	or	r24, r25
 314:	8b bb       	out	0x1b, r24	; 27
			break;
 316:	85 c0       	rjmp	.+266    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
 318:	47 b3       	in	r20, 0x17	; 23
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_INITPIN+0x102>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	8a 95       	dec	r24
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_INITPIN+0xfe>
 32a:	cb 01       	movw	r24, r22
 32c:	96 2f       	mov	r25, r22
 32e:	90 95       	com	r25
 330:	94 23       	and	r25, r20
 332:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
 334:	98 b3       	in	r25, 0x18	; 24
 336:	89 2b       	or	r24, r25
 338:	88 bb       	out	0x18, r24	; 24
			break;
 33a:	73 c0       	rjmp	.+230    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 33c:	44 b3       	in	r20, 0x14	; 20
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_INITPIN+0x126>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_INITPIN+0x122>
 34e:	cb 01       	movw	r24, r22
 350:	96 2f       	mov	r25, r22
 352:	90 95       	com	r25
 354:	94 23       	and	r25, r20
 356:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
 358:	95 b3       	in	r25, 0x15	; 21
 35a:	89 2b       	or	r24, r25
 35c:	85 bb       	out	0x15, r24	; 21
			break;
 35e:	61 c0       	rjmp	.+194    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 360:	41 b3       	in	r20, 0x11	; 17
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_INITPIN+0x14a>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_INITPIN+0x146>
 372:	cb 01       	movw	r24, r22
 374:	96 2f       	mov	r25, r22
 376:	90 95       	com	r25
 378:	94 23       	and	r25, r20
 37a:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
 37c:	92 b3       	in	r25, 0x12	; 18
 37e:	89 2b       	or	r24, r25
 380:	82 bb       	out	0x12, r24	; 18
			break;
 382:	4f c0       	rjmp	.+158    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
 384:	91 30       	cpi	r25, 0x01	; 1
 386:	c1 f0       	breq	.+48     	; 0x3b8 <DIO_INITPIN+0x194>
 388:	28 f0       	brcs	.+10     	; 0x394 <DIO_INITPIN+0x170>
 38a:	92 30       	cpi	r25, 0x02	; 2
 38c:	39 f1       	breq	.+78     	; 0x3dc <DIO_INITPIN+0x1b8>
 38e:	93 30       	cpi	r25, 0x03	; 3
 390:	b9 f1       	breq	.+110    	; 0x400 <__LOCK_REGION_LENGTH__>
 392:	47 c0       	rjmp	.+142    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 394:	4b b3       	in	r20, 0x1b	; 27
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_INITPIN+0x17e>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	8a 95       	dec	r24
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_INITPIN+0x17a>
 3a6:	cb 01       	movw	r24, r22
 3a8:	96 2f       	mov	r25, r22
 3aa:	90 95       	com	r25
 3ac:	94 23       	and	r25, r20
 3ae:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
 3b0:	9a b3       	in	r25, 0x1a	; 26
 3b2:	89 2b       	or	r24, r25
 3b4:	8a bb       	out	0x1a, r24	; 26
			break;
 3b6:	35 c0       	rjmp	.+106    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
 3b8:	48 b3       	in	r20, 0x18	; 24
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_INITPIN+0x1a2>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_INITPIN+0x19e>
 3ca:	cb 01       	movw	r24, r22
 3cc:	96 2f       	mov	r25, r22
 3ce:	90 95       	com	r25
 3d0:	94 23       	and	r25, r20
 3d2:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
 3d4:	97 b3       	in	r25, 0x17	; 23
 3d6:	89 2b       	or	r24, r25
 3d8:	87 bb       	out	0x17, r24	; 23
			break;
 3da:	23 c0       	rjmp	.+70     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PC:
			clear_bit(PORTC,PIN_NUM);
 3dc:	45 b3       	in	r20, 0x15	; 21
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_INITPIN+0x1c6>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_INITPIN+0x1c2>
 3ee:	cb 01       	movw	r24, r22
 3f0:	96 2f       	mov	r25, r22
 3f2:	90 95       	com	r25
 3f4:	94 23       	and	r25, r20
 3f6:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
 3f8:	94 b3       	in	r25, 0x14	; 20
 3fa:	89 2b       	or	r24, r25
 3fc:	84 bb       	out	0x14, r24	; 20
			break;
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

			case PD:
			clear_bit(PORTD,PIN_NUM);
 400:	42 b3       	in	r20, 0x12	; 18
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	96 2f       	mov	r25, r22
 416:	90 95       	com	r25
 418:	94 23       	and	r25, r20
 41a:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
 41c:	91 b3       	in	r25, 0x11	; 17
 41e:	89 2b       	or	r24, r25
 420:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
 422:	08 95       	ret
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	08 95       	ret

00000428 <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
 428:	98 2f       	mov	r25, r24
 42a:	96 95       	lsr	r25
 42c:	96 95       	lsr	r25
 42e:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
 430:	95 30       	cpi	r25, 0x05	; 5
 432:	08 f0       	brcs	.+2      	; 0x436 <DIO_WRITEPIN+0xe>
 434:	8e c0       	rjmp	.+284    	; 0x552 <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
 436:	63 30       	cpi	r22, 0x03	; 3
 438:	08 f0       	brcs	.+2      	; 0x43c <DIO_WRITEPIN+0x14>
 43a:	8d c0       	rjmp	.+282    	; 0x556 <DIO_WRITEPIN+0x12e>
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
 43c:	87 70       	andi	r24, 0x07	; 7
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	09 f0       	breq	.+2      	; 0x444 <DIO_WRITEPIN+0x1c>
 442:	40 c0       	rjmp	.+128    	; 0x4c4 <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
 444:	91 30       	cpi	r25, 0x01	; 1
 446:	a1 f0       	breq	.+40     	; 0x470 <DIO_WRITEPIN+0x48>
 448:	28 f0       	brcs	.+10     	; 0x454 <DIO_WRITEPIN+0x2c>
 44a:	92 30       	cpi	r25, 0x02	; 2
 44c:	f9 f0       	breq	.+62     	; 0x48c <DIO_WRITEPIN+0x64>
 44e:	93 30       	cpi	r25, 0x03	; 3
 450:	59 f1       	breq	.+86     	; 0x4a8 <DIO_WRITEPIN+0x80>
 452:	83 c0       	rjmp	.+262    	; 0x55a <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
 454:	4b b3       	in	r20, 0x1b	; 27
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_WRITEPIN+0x3a>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_WRITEPIN+0x36>
 466:	cb 01       	movw	r24, r22
 468:	84 2b       	or	r24, r20
 46a:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 46c:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
 46e:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
 470:	48 b3       	in	r20, 0x18	; 24
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_WRITEPIN+0x56>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_WRITEPIN+0x52>
 482:	cb 01       	movw	r24, r22
 484:	84 2b       	or	r24, r20
 486:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 488:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
 48a:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
 48c:	45 b3       	in	r20, 0x15	; 21
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	b9 01       	movw	r22, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_WRITEPIN+0x72>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	8a 95       	dec	r24
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_WRITEPIN+0x6e>
 49e:	cb 01       	movw	r24, r22
 4a0:	84 2b       	or	r24, r20
 4a2:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
 4a6:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
 4a8:	42 b3       	in	r20, 0x12	; 18
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	b9 01       	movw	r22, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_WRITEPIN+0x8e>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_WRITEPIN+0x8a>
 4ba:	cb 01       	movw	r24, r22
 4bc:	84 2b       	or	r24, r20
 4be:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
 4c2:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
 4c4:	61 11       	cpse	r22, r1
 4c6:	44 c0       	rjmp	.+136    	; 0x550 <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
 4c8:	91 30       	cpi	r25, 0x01	; 1
 4ca:	a9 f0       	breq	.+42     	; 0x4f6 <DIO_WRITEPIN+0xce>
 4cc:	28 f0       	brcs	.+10     	; 0x4d8 <DIO_WRITEPIN+0xb0>
 4ce:	92 30       	cpi	r25, 0x02	; 2
 4d0:	09 f1       	breq	.+66     	; 0x514 <DIO_WRITEPIN+0xec>
 4d2:	93 30       	cpi	r25, 0x03	; 3
 4d4:	71 f1       	breq	.+92     	; 0x532 <DIO_WRITEPIN+0x10a>
 4d6:	43 c0       	rjmp	.+134    	; 0x55e <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 4d8:	4b b3       	in	r20, 0x1b	; 27
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_WRITEPIN+0xbe>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_WRITEPIN+0xba>
 4ea:	cb 01       	movw	r24, r22
 4ec:	80 95       	com	r24
 4ee:	84 23       	and	r24, r20
 4f0:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
 4f4:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
 4f6:	48 b3       	in	r20, 0x18	; 24
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_WRITEPIN+0xdc>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_WRITEPIN+0xd8>
 508:	cb 01       	movw	r24, r22
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 510:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
 512:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
 514:	45 b3       	in	r20, 0x15	; 21
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	b9 01       	movw	r22, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_WRITEPIN+0xfa>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_WRITEPIN+0xf6>
 526:	cb 01       	movw	r24, r22
 528:	80 95       	com	r24
 52a:	84 23       	and	r24, r20
 52c:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 52e:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
 530:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
 532:	42 b3       	in	r20, 0x12	; 18
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	b9 01       	movw	r22, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_WRITEPIN+0x118>
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	8a 95       	dec	r24
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_WRITEPIN+0x114>
 544:	cb 01       	movw	r24, r22
 546:	80 95       	com	r24
 548:	84 23       	and	r24, r20
 54a:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 54c:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
 54e:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
 550:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 55e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
 560:	08 95       	ret

00000562 <DIO_READPIN>:
*/
DIO_ERROR_TYPE DIO_READPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE* VOLT)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
 562:	98 2f       	mov	r25, r24
 564:	96 95       	lsr	r25
 566:	96 95       	lsr	r25
 568:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
 56a:	95 30       	cpi	r25, 0x05	; 5
 56c:	08 f0       	brcs	.+2      	; 0x570 <DIO_READPIN+0xe>
 56e:	41 c0       	rjmp	.+130    	; 0x5f2 <DIO_READPIN+0x90>
DIO_ERROR_TYPE DIO_READPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE* VOLT)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
 570:	87 70       	andi	r24, 0x07	; 7
		return INVALID_PIN_NUMBER;
	}
	else
	{
	
	switch(PORT)
 572:	91 30       	cpi	r25, 0x01	; 1
 574:	a1 f0       	breq	.+40     	; 0x59e <DIO_READPIN+0x3c>
 576:	28 f0       	brcs	.+10     	; 0x582 <DIO_READPIN+0x20>
 578:	92 30       	cpi	r25, 0x02	; 2
 57a:	f9 f0       	breq	.+62     	; 0x5ba <DIO_READPIN+0x58>
 57c:	93 30       	cpi	r25, 0x03	; 3
 57e:	59 f1       	breq	.+86     	; 0x5d6 <DIO_READPIN+0x74>
 580:	3a c0       	rjmp	.+116    	; 0x5f6 <DIO_READPIN+0x94>
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
 582:	29 b3       	in	r18, 0x19	; 25
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	a9 01       	movw	r20, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_READPIN+0x2c>
 58a:	55 95       	asr	r21
 58c:	47 95       	ror	r20
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_READPIN+0x28>
 592:	ca 01       	movw	r24, r20
 594:	81 70       	andi	r24, 0x01	; 1
 596:	fb 01       	movw	r30, r22
 598:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
 59a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(PORT)
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
 59c:	08 95       	ret
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
 59e:	26 b3       	in	r18, 0x16	; 22
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	a9 01       	movw	r20, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_READPIN+0x48>
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_READPIN+0x44>
 5ae:	ca 01       	movw	r24, r20
 5b0:	81 70       	andi	r24, 0x01	; 1
 5b2:	fb 01       	movw	r30, r22
 5b4:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
 5b8:	08 95       	ret
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
 5ba:	23 b3       	in	r18, 0x13	; 19
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	a9 01       	movw	r20, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_READPIN+0x64>
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_READPIN+0x60>
 5ca:	ca 01       	movw	r24, r20
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	fb 01       	movw	r30, r22
 5d0:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
 5d4:	08 95       	ret
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
 5d6:	20 b3       	in	r18, 0x10	; 16
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	a9 01       	movw	r20, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_READPIN+0x80>
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	8a 95       	dec	r24
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_READPIN+0x7c>
 5e6:	ca 01       	movw	r24, r20
 5e8:	81 70       	andi	r24, 0x01	; 1
 5ea:	fb 01       	movw	r30, r22
 5ec:	80 83       	st	Z, r24
		break;
	}
	return VALID_DIO;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
 5f0:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	08 95       	ret
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
}
}
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
