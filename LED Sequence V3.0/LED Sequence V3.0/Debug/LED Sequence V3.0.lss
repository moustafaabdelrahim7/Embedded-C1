
LED Sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000131e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00001392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000328a  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  000047aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000141e  00000000  00000000  00005077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00006498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000895  00000000  00000000  000066b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3a  00000000  00000000  00006f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00007d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_1>
       8:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_2>
       c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_11>
      30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      54:	0e 09       	sbc	r16, r14
      56:	18 09       	sbc	r17, r8
      58:	22 09       	sbc	r18, r2
      5a:	2c 09       	sbc	r18, r12
      5c:	36 09       	sbc	r19, r6
      5e:	40 09       	sbc	r20, r0
      60:	4a 09       	sbc	r20, r10
      62:	54 09       	sbc	r21, r4

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
      70:	20 e0       	ldi	r18, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
      78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
      7a:	a3 36       	cpi	r26, 0x63	; 99
      7c:	b2 07       	cpc	r27, r18
      7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
      80:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
      84:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

00000088 <__bad_interrupt>:
      88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <LED_INIT>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
      8c:	88 32       	cpi	r24, 0x28	; 40
      8e:	28 f4       	brcc	.+10     	; 0x9a <LED_INIT+0xe>
	{
		return INVLAID_LED_PIN_NUMBER;
	}
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
      90:	60 e0       	ldi	r22, 0x00	; 0
      92:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
		return VALID_LED;
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_LED_PORT;
      9a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
		return VALID_LED;
	}
}
      9c:	08 95       	ret

0000009e <main>:
#define   F_CPU 8000000UL            //FOR DELAY LIB

int main(void)
{
	/**********intializing LED& DIO*************/
	LED_INIT(pina0);
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina1);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina2);
      aa:	82 e0       	ldi	r24, 0x02	; 2
      ac:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina3);
      b0:	83 e0       	ldi	r24, 0x03	; 3
      b2:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	DIO_INITPIN(pind2,INPLUP);
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	8a e1       	ldi	r24, 0x1A	; 26
      ba:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
	DIO_INITPIN(pind3,INPLUP);
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	8b e1       	ldi	r24, 0x1B	; 27
      c2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
	/*****************INTIALIZING INTERRUPT***********/
	sei();
      c6:	78 94       	sei
	EXI_TriggerEdge(EX_INT0,LOW_LEVEL);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 6f 02 	call	0x4de	; 0x4de <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,LOW_LEVEL);
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 6f 02 	call	0x4de	; 0x4de <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 5d 02 	call	0x4ba	; 0x4ba <EXI_Enable>
	EXI_Enable(EX_INT1);
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <EXI_Enable>
	Timer0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_64,OC0_DISCONNECTED);
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	63 e0       	ldi	r22, 0x03	; 3
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <Timer0_Init>
	Timer0_OVF_InterrupEnable();
      ee:	0e 94 83 09 	call	0x1306	; 0x1306 <Timer0_OVF_InterrupEnable>
	timer0_SetCounter(6);
      f2:	86 e0       	ldi	r24, 0x06	; 6
      f4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
      f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x5a>

000000fa <DIO_INITPIN>:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
}
}
      fa:	98 2f       	mov	r25, r24
      fc:	96 95       	lsr	r25
      fe:	96 95       	lsr	r25
     100:	96 95       	lsr	r25
     102:	95 30       	cpi	r25, 0x05	; 5
     104:	08 f0       	brcs	.+2      	; 0x108 <DIO_INITPIN+0xe>
     106:	f9 c0       	rjmp	.+498    	; 0x2fa <DIO_INITPIN+0x200>
     108:	87 70       	andi	r24, 0x07	; 7
     10a:	61 30       	cpi	r22, 0x01	; 1
     10c:	31 f0       	breq	.+12     	; 0x11a <DIO_INITPIN+0x20>
     10e:	08 f4       	brcc	.+2      	; 0x112 <DIO_INITPIN+0x18>
     110:	a4 c0       	rjmp	.+328    	; 0x25a <DIO_INITPIN+0x160>
     112:	62 30       	cpi	r22, 0x02	; 2
     114:	09 f4       	brne	.+2      	; 0x118 <DIO_INITPIN+0x1e>
     116:	51 c0       	rjmp	.+162    	; 0x1ba <DIO_INITPIN+0xc0>
     118:	ef c0       	rjmp	.+478    	; 0x2f8 <DIO_INITPIN+0x1fe>
     11a:	91 30       	cpi	r25, 0x01	; 1
     11c:	c1 f0       	breq	.+48     	; 0x14e <DIO_INITPIN+0x54>
     11e:	28 f0       	brcs	.+10     	; 0x12a <DIO_INITPIN+0x30>
     120:	92 30       	cpi	r25, 0x02	; 2
     122:	39 f1       	breq	.+78     	; 0x172 <DIO_INITPIN+0x78>
     124:	93 30       	cpi	r25, 0x03	; 3
     126:	b9 f1       	breq	.+110    	; 0x196 <DIO_INITPIN+0x9c>
     128:	e7 c0       	rjmp	.+462    	; 0x2f8 <DIO_INITPIN+0x1fe>
     12a:	4a b3       	in	r20, 0x1a	; 26
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_INITPIN+0x3e>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_INITPIN+0x3a>
     13c:	cb 01       	movw	r24, r22
     13e:	80 95       	com	r24
     140:	94 2f       	mov	r25, r20
     142:	98 23       	and	r25, r24
     144:	9a bb       	out	0x1a, r25	; 26
     146:	9b b3       	in	r25, 0x1b	; 27
     148:	89 23       	and	r24, r25
     14a:	8b bb       	out	0x1b, r24	; 27
     14c:	d5 c0       	rjmp	.+426    	; 0x2f8 <DIO_INITPIN+0x1fe>
     14e:	47 b3       	in	r20, 0x17	; 23
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	b9 01       	movw	r22, r18
     156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_INITPIN+0x62>
     158:	66 0f       	add	r22, r22
     15a:	77 1f       	adc	r23, r23
     15c:	8a 95       	dec	r24
     15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_INITPIN+0x5e>
     160:	cb 01       	movw	r24, r22
     162:	80 95       	com	r24
     164:	94 2f       	mov	r25, r20
     166:	98 23       	and	r25, r24
     168:	97 bb       	out	0x17, r25	; 23
     16a:	98 b3       	in	r25, 0x18	; 24
     16c:	89 23       	and	r24, r25
     16e:	88 bb       	out	0x18, r24	; 24
     170:	c3 c0       	rjmp	.+390    	; 0x2f8 <DIO_INITPIN+0x1fe>
     172:	44 b3       	in	r20, 0x14	; 20
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	b9 01       	movw	r22, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_INITPIN+0x86>
     17c:	66 0f       	add	r22, r22
     17e:	77 1f       	adc	r23, r23
     180:	8a 95       	dec	r24
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_INITPIN+0x82>
     184:	cb 01       	movw	r24, r22
     186:	80 95       	com	r24
     188:	94 2f       	mov	r25, r20
     18a:	98 23       	and	r25, r24
     18c:	94 bb       	out	0x14, r25	; 20
     18e:	95 b3       	in	r25, 0x15	; 21
     190:	89 23       	and	r24, r25
     192:	85 bb       	out	0x15, r24	; 21
     194:	b1 c0       	rjmp	.+354    	; 0x2f8 <DIO_INITPIN+0x1fe>
     196:	41 b3       	in	r20, 0x11	; 17
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	b9 01       	movw	r22, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_INITPIN+0xaa>
     1a0:	66 0f       	add	r22, r22
     1a2:	77 1f       	adc	r23, r23
     1a4:	8a 95       	dec	r24
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_INITPIN+0xa6>
     1a8:	cb 01       	movw	r24, r22
     1aa:	80 95       	com	r24
     1ac:	94 2f       	mov	r25, r20
     1ae:	98 23       	and	r25, r24
     1b0:	91 bb       	out	0x11, r25	; 17
     1b2:	92 b3       	in	r25, 0x12	; 18
     1b4:	89 23       	and	r24, r25
     1b6:	82 bb       	out	0x12, r24	; 18
     1b8:	9f c0       	rjmp	.+318    	; 0x2f8 <DIO_INITPIN+0x1fe>
     1ba:	91 30       	cpi	r25, 0x01	; 1
     1bc:	c1 f0       	breq	.+48     	; 0x1ee <DIO_INITPIN+0xf4>
     1be:	28 f0       	brcs	.+10     	; 0x1ca <DIO_INITPIN+0xd0>
     1c0:	92 30       	cpi	r25, 0x02	; 2
     1c2:	39 f1       	breq	.+78     	; 0x212 <DIO_INITPIN+0x118>
     1c4:	93 30       	cpi	r25, 0x03	; 3
     1c6:	b9 f1       	breq	.+110    	; 0x236 <DIO_INITPIN+0x13c>
     1c8:	97 c0       	rjmp	.+302    	; 0x2f8 <DIO_INITPIN+0x1fe>
     1ca:	4a b3       	in	r20, 0x1a	; 26
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	b9 01       	movw	r22, r18
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_INITPIN+0xde>
     1d4:	66 0f       	add	r22, r22
     1d6:	77 1f       	adc	r23, r23
     1d8:	8a 95       	dec	r24
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_INITPIN+0xda>
     1dc:	cb 01       	movw	r24, r22
     1de:	96 2f       	mov	r25, r22
     1e0:	90 95       	com	r25
     1e2:	94 23       	and	r25, r20
     1e4:	9a bb       	out	0x1a, r25	; 26
     1e6:	9b b3       	in	r25, 0x1b	; 27
     1e8:	89 2b       	or	r24, r25
     1ea:	8b bb       	out	0x1b, r24	; 27
     1ec:	85 c0       	rjmp	.+266    	; 0x2f8 <DIO_INITPIN+0x1fe>
     1ee:	47 b3       	in	r20, 0x17	; 23
     1f0:	21 e0       	ldi	r18, 0x01	; 1
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	b9 01       	movw	r22, r18
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_INITPIN+0x102>
     1f8:	66 0f       	add	r22, r22
     1fa:	77 1f       	adc	r23, r23
     1fc:	8a 95       	dec	r24
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_INITPIN+0xfe>
     200:	cb 01       	movw	r24, r22
     202:	96 2f       	mov	r25, r22
     204:	90 95       	com	r25
     206:	94 23       	and	r25, r20
     208:	97 bb       	out	0x17, r25	; 23
     20a:	98 b3       	in	r25, 0x18	; 24
     20c:	89 2b       	or	r24, r25
     20e:	88 bb       	out	0x18, r24	; 24
     210:	73 c0       	rjmp	.+230    	; 0x2f8 <DIO_INITPIN+0x1fe>
     212:	44 b3       	in	r20, 0x14	; 20
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	b9 01       	movw	r22, r18
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_INITPIN+0x126>
     21c:	66 0f       	add	r22, r22
     21e:	77 1f       	adc	r23, r23
     220:	8a 95       	dec	r24
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_INITPIN+0x122>
     224:	cb 01       	movw	r24, r22
     226:	96 2f       	mov	r25, r22
     228:	90 95       	com	r25
     22a:	94 23       	and	r25, r20
     22c:	94 bb       	out	0x14, r25	; 20
     22e:	95 b3       	in	r25, 0x15	; 21
     230:	89 2b       	or	r24, r25
     232:	85 bb       	out	0x15, r24	; 21
     234:	61 c0       	rjmp	.+194    	; 0x2f8 <DIO_INITPIN+0x1fe>
     236:	41 b3       	in	r20, 0x11	; 17
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	b9 01       	movw	r22, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_INITPIN+0x14a>
     240:	66 0f       	add	r22, r22
     242:	77 1f       	adc	r23, r23
     244:	8a 95       	dec	r24
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_INITPIN+0x146>
     248:	cb 01       	movw	r24, r22
     24a:	96 2f       	mov	r25, r22
     24c:	90 95       	com	r25
     24e:	94 23       	and	r25, r20
     250:	91 bb       	out	0x11, r25	; 17
     252:	92 b3       	in	r25, 0x12	; 18
     254:	89 2b       	or	r24, r25
     256:	82 bb       	out	0x12, r24	; 18
     258:	4f c0       	rjmp	.+158    	; 0x2f8 <DIO_INITPIN+0x1fe>
     25a:	91 30       	cpi	r25, 0x01	; 1
     25c:	c1 f0       	breq	.+48     	; 0x28e <DIO_INITPIN+0x194>
     25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_INITPIN+0x170>
     260:	92 30       	cpi	r25, 0x02	; 2
     262:	39 f1       	breq	.+78     	; 0x2b2 <DIO_INITPIN+0x1b8>
     264:	93 30       	cpi	r25, 0x03	; 3
     266:	b9 f1       	breq	.+110    	; 0x2d6 <DIO_INITPIN+0x1dc>
     268:	47 c0       	rjmp	.+142    	; 0x2f8 <DIO_INITPIN+0x1fe>
     26a:	4b b3       	in	r20, 0x1b	; 27
     26c:	21 e0       	ldi	r18, 0x01	; 1
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	b9 01       	movw	r22, r18
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_INITPIN+0x17e>
     274:	66 0f       	add	r22, r22
     276:	77 1f       	adc	r23, r23
     278:	8a 95       	dec	r24
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_INITPIN+0x17a>
     27c:	cb 01       	movw	r24, r22
     27e:	96 2f       	mov	r25, r22
     280:	90 95       	com	r25
     282:	94 23       	and	r25, r20
     284:	9b bb       	out	0x1b, r25	; 27
     286:	9a b3       	in	r25, 0x1a	; 26
     288:	89 2b       	or	r24, r25
     28a:	8a bb       	out	0x1a, r24	; 26
     28c:	35 c0       	rjmp	.+106    	; 0x2f8 <DIO_INITPIN+0x1fe>
     28e:	48 b3       	in	r20, 0x18	; 24
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	b9 01       	movw	r22, r18
     296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_INITPIN+0x1a2>
     298:	66 0f       	add	r22, r22
     29a:	77 1f       	adc	r23, r23
     29c:	8a 95       	dec	r24
     29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_INITPIN+0x19e>
     2a0:	cb 01       	movw	r24, r22
     2a2:	96 2f       	mov	r25, r22
     2a4:	90 95       	com	r25
     2a6:	94 23       	and	r25, r20
     2a8:	98 bb       	out	0x18, r25	; 24
     2aa:	97 b3       	in	r25, 0x17	; 23
     2ac:	89 2b       	or	r24, r25
     2ae:	87 bb       	out	0x17, r24	; 23
     2b0:	23 c0       	rjmp	.+70     	; 0x2f8 <DIO_INITPIN+0x1fe>
     2b2:	45 b3       	in	r20, 0x15	; 21
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	b9 01       	movw	r22, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_INITPIN+0x1c6>
     2bc:	66 0f       	add	r22, r22
     2be:	77 1f       	adc	r23, r23
     2c0:	8a 95       	dec	r24
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_INITPIN+0x1c2>
     2c4:	cb 01       	movw	r24, r22
     2c6:	96 2f       	mov	r25, r22
     2c8:	90 95       	com	r25
     2ca:	94 23       	and	r25, r20
     2cc:	95 bb       	out	0x15, r25	; 21
     2ce:	94 b3       	in	r25, 0x14	; 20
     2d0:	89 2b       	or	r24, r25
     2d2:	84 bb       	out	0x14, r24	; 20
     2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <DIO_INITPIN+0x1fe>
     2d6:	42 b3       	in	r20, 0x12	; 18
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	b9 01       	movw	r22, r18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_INITPIN+0x1ea>
     2e0:	66 0f       	add	r22, r22
     2e2:	77 1f       	adc	r23, r23
     2e4:	8a 95       	dec	r24
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_INITPIN+0x1e6>
     2e8:	cb 01       	movw	r24, r22
     2ea:	96 2f       	mov	r25, r22
     2ec:	90 95       	com	r25
     2ee:	94 23       	and	r25, r20
     2f0:	92 bb       	out	0x12, r25	; 18
     2f2:	91 b3       	in	r25, 0x11	; 17
     2f4:	89 2b       	or	r24, r25
     2f6:	81 bb       	out	0x11, r24	; 17
     2f8:	08 95       	ret
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	08 95       	ret

000002fe <DIO_WRITEPIN>:
     2fe:	98 2f       	mov	r25, r24
     300:	96 95       	lsr	r25
     302:	96 95       	lsr	r25
     304:	96 95       	lsr	r25
     306:	95 30       	cpi	r25, 0x05	; 5
     308:	08 f0       	brcs	.+2      	; 0x30c <DIO_WRITEPIN+0xe>
     30a:	8e c0       	rjmp	.+284    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     30c:	63 30       	cpi	r22, 0x03	; 3
     30e:	08 f0       	brcs	.+2      	; 0x312 <DIO_WRITEPIN+0x14>
     310:	8d c0       	rjmp	.+282    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     312:	87 70       	andi	r24, 0x07	; 7
     314:	61 30       	cpi	r22, 0x01	; 1
     316:	09 f0       	breq	.+2      	; 0x31a <DIO_WRITEPIN+0x1c>
     318:	40 c0       	rjmp	.+128    	; 0x39a <DIO_WRITEPIN+0x9c>
     31a:	91 30       	cpi	r25, 0x01	; 1
     31c:	a1 f0       	breq	.+40     	; 0x346 <DIO_WRITEPIN+0x48>
     31e:	28 f0       	brcs	.+10     	; 0x32a <DIO_WRITEPIN+0x2c>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	f9 f0       	breq	.+62     	; 0x362 <DIO_WRITEPIN+0x64>
     324:	93 30       	cpi	r25, 0x03	; 3
     326:	59 f1       	breq	.+86     	; 0x37e <DIO_WRITEPIN+0x80>
     328:	83 c0       	rjmp	.+262    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     32a:	4b b3       	in	r20, 0x1b	; 27
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	b9 01       	movw	r22, r18
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_WRITEPIN+0x3a>
     334:	66 0f       	add	r22, r22
     336:	77 1f       	adc	r23, r23
     338:	8a 95       	dec	r24
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_WRITEPIN+0x36>
     33c:	cb 01       	movw	r24, r22
     33e:	84 2b       	or	r24, r20
     340:	8b bb       	out	0x1b, r24	; 27
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	08 95       	ret
     346:	48 b3       	in	r20, 0x18	; 24
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	b9 01       	movw	r22, r18
     34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_WRITEPIN+0x56>
     350:	66 0f       	add	r22, r22
     352:	77 1f       	adc	r23, r23
     354:	8a 95       	dec	r24
     356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_WRITEPIN+0x52>
     358:	cb 01       	movw	r24, r22
     35a:	84 2b       	or	r24, r20
     35c:	88 bb       	out	0x18, r24	; 24
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	08 95       	ret
     362:	45 b3       	in	r20, 0x15	; 21
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	b9 01       	movw	r22, r18
     36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_WRITEPIN+0x72>
     36c:	66 0f       	add	r22, r22
     36e:	77 1f       	adc	r23, r23
     370:	8a 95       	dec	r24
     372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_WRITEPIN+0x6e>
     374:	cb 01       	movw	r24, r22
     376:	84 2b       	or	r24, r20
     378:	85 bb       	out	0x15, r24	; 21
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret
     37e:	42 b3       	in	r20, 0x12	; 18
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	b9 01       	movw	r22, r18
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_WRITEPIN+0x8e>
     388:	66 0f       	add	r22, r22
     38a:	77 1f       	adc	r23, r23
     38c:	8a 95       	dec	r24
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_WRITEPIN+0x8a>
     390:	cb 01       	movw	r24, r22
     392:	84 2b       	or	r24, r20
     394:	82 bb       	out	0x12, r24	; 18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret
     39a:	61 11       	cpse	r22, r1
     39c:	44 c0       	rjmp	.+136    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     39e:	91 30       	cpi	r25, 0x01	; 1
     3a0:	a9 f0       	breq	.+42     	; 0x3cc <DIO_WRITEPIN+0xce>
     3a2:	28 f0       	brcs	.+10     	; 0x3ae <DIO_WRITEPIN+0xb0>
     3a4:	92 30       	cpi	r25, 0x02	; 2
     3a6:	09 f1       	breq	.+66     	; 0x3ea <DIO_WRITEPIN+0xec>
     3a8:	93 30       	cpi	r25, 0x03	; 3
     3aa:	71 f1       	breq	.+92     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ac:	43 c0       	rjmp	.+134    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3ae:	4b b3       	in	r20, 0x1b	; 27
     3b0:	21 e0       	ldi	r18, 0x01	; 1
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	b9 01       	movw	r22, r18
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_WRITEPIN+0xbe>
     3b8:	66 0f       	add	r22, r22
     3ba:	77 1f       	adc	r23, r23
     3bc:	8a 95       	dec	r24
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_WRITEPIN+0xba>
     3c0:	cb 01       	movw	r24, r22
     3c2:	80 95       	com	r24
     3c4:	84 23       	and	r24, r20
     3c6:	8b bb       	out	0x1b, r24	; 27
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret
     3cc:	48 b3       	in	r20, 0x18	; 24
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	b9 01       	movw	r22, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_WRITEPIN+0xdc>
     3d6:	66 0f       	add	r22, r22
     3d8:	77 1f       	adc	r23, r23
     3da:	8a 95       	dec	r24
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_WRITEPIN+0xd8>
     3de:	cb 01       	movw	r24, r22
     3e0:	80 95       	com	r24
     3e2:	84 23       	and	r24, r20
     3e4:	88 bb       	out	0x18, r24	; 24
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret
     3ea:	45 b3       	in	r20, 0x15	; 21
     3ec:	21 e0       	ldi	r18, 0x01	; 1
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	b9 01       	movw	r22, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_WRITEPIN+0xfa>
     3f4:	66 0f       	add	r22, r22
     3f6:	77 1f       	adc	r23, r23
     3f8:	8a 95       	dec	r24
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_WRITEPIN+0xf6>
     3fc:	cb 01       	movw	r24, r22
     3fe:	80 95       	com	r24
     400:	84 23       	and	r24, r20
     402:	85 bb       	out	0x15, r24	; 21
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret
     408:	42 b3       	in	r20, 0x12	; 18
     40a:	21 e0       	ldi	r18, 0x01	; 1
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	b9 01       	movw	r22, r18
     410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	8a 95       	dec	r24
     418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     41a:	cb 01       	movw	r24, r22
     41c:	80 95       	com	r24
     41e:	84 23       	and	r24, r20
     420:	82 bb       	out	0x12, r24	; 18
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	08 95       	ret
     426:	08 95       	ret
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	08 95       	ret
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	08 95       	ret
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret

00000438 <DIO_TogglePin>:
void DIO_TogglePin(DIO_PIN_TYPE pin)
{
	uint8_t pin_num =pin%8;
     438:	98 2f       	mov	r25, r24
     43a:	97 70       	andi	r25, 0x07	; 7
	DIO_PORT_TYPE  port= pin/8;
	
	switch (port)
     43c:	86 95       	lsr	r24
     43e:	86 95       	lsr	r24
     440:	86 95       	lsr	r24
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	99 f0       	breq	.+38     	; 0x46c <DIO_TogglePin+0x34>
     446:	28 f0       	brcs	.+10     	; 0x452 <DIO_TogglePin+0x1a>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	e9 f0       	breq	.+58     	; 0x486 <DIO_TogglePin+0x4e>
     44c:	83 30       	cpi	r24, 0x03	; 3
     44e:	41 f1       	breq	.+80     	; 0x4a0 <DIO_TogglePin+0x68>
     450:	08 95       	ret
	{
		case PA: toggel_bit(PORTA,pin_num); break;
     452:	4b b3       	in	r20, 0x1b	; 27
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	b9 01       	movw	r22, r18
     45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_TogglePin+0x28>
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	9a 95       	dec	r25
     462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_TogglePin+0x24>
     464:	cb 01       	movw	r24, r22
     466:	84 27       	eor	r24, r20
     468:	8b bb       	out	0x1b, r24	; 27
     46a:	08 95       	ret
		case PB: toggel_bit(PORTB,pin_num); break;
     46c:	48 b3       	in	r20, 0x18	; 24
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	b9 01       	movw	r22, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_TogglePin+0x42>
     476:	66 0f       	add	r22, r22
     478:	77 1f       	adc	r23, r23
     47a:	9a 95       	dec	r25
     47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_TogglePin+0x3e>
     47e:	cb 01       	movw	r24, r22
     480:	84 27       	eor	r24, r20
     482:	88 bb       	out	0x18, r24	; 24
     484:	08 95       	ret
		case PC: toggel_bit(PORTC,pin_num); break;
     486:	45 b3       	in	r20, 0x15	; 21
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	b9 01       	movw	r22, r18
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_TogglePin+0x5c>
     490:	66 0f       	add	r22, r22
     492:	77 1f       	adc	r23, r23
     494:	9a 95       	dec	r25
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_TogglePin+0x58>
     498:	cb 01       	movw	r24, r22
     49a:	84 27       	eor	r24, r20
     49c:	85 bb       	out	0x15, r24	; 21
     49e:	08 95       	ret
		case PD: toggel_bit(PORTD,pin_num); break;
     4a0:	42 b3       	in	r20, 0x12	; 18
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	b9 01       	movw	r22, r18
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_TogglePin+0x76>
     4aa:	66 0f       	add	r22, r22
     4ac:	77 1f       	adc	r23, r23
     4ae:	9a 95       	dec	r25
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_TogglePin+0x72>
     4b2:	cb 01       	movw	r24, r22
     4b4:	84 27       	eor	r24, r20
     4b6:	82 bb       	out	0x12, r24	; 18
     4b8:	08 95       	ret

000004ba <EXI_Enable>:
		clear_bit(GICR,INT1); break;
		case EX_INT2:
		clear_bit(GICR,INT2); break;
	}
	
}
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	41 f0       	breq	.+16     	; 0x4ce <EXI_Enable+0x14>
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <EXI_Enable+0xc>
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	49 f0       	breq	.+18     	; 0x4d6 <EXI_Enable+0x1c>
     4c4:	08 95       	ret
     4c6:	8b b7       	in	r24, 0x3b	; 59
     4c8:	80 64       	ori	r24, 0x40	; 64
     4ca:	8b bf       	out	0x3b, r24	; 59
     4cc:	08 95       	ret
     4ce:	8b b7       	in	r24, 0x3b	; 59
     4d0:	80 68       	ori	r24, 0x80	; 128
     4d2:	8b bf       	out	0x3b, r24	; 59
     4d4:	08 95       	ret
     4d6:	8b b7       	in	r24, 0x3b	; 59
     4d8:	80 62       	ori	r24, 0x20	; 32
     4da:	8b bf       	out	0x3b, r24	; 59
     4dc:	08 95       	ret

000004de <EXI_TriggerEdge>:

/*it defines the trigger state of the interrupt*/
INTERRUPT_ERROR_TYPE EXI_TriggerEdge (EXInterruptSource_type interrupt, TriggerEdge_type edge )
{

	switch(interrupt)
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	49 f1       	breq	.+82     	; 0x534 <EXI_TriggerEdge+0x56>
     4e2:	20 f0       	brcs	.+8      	; 0x4ec <EXI_TriggerEdge+0xe>
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	09 f4       	brne	.+2      	; 0x4ea <EXI_TriggerEdge+0xc>
     4e8:	49 c0       	rjmp	.+146    	; 0x57c <EXI_TriggerEdge+0x9e>
     4ea:	08 95       	ret
	{
		case EX_INT0:
		switch(edge)
     4ec:	61 30       	cpi	r22, 0x01	; 1
     4ee:	69 f0       	breq	.+26     	; 0x50a <EXI_TriggerEdge+0x2c>
     4f0:	28 f0       	brcs	.+10     	; 0x4fc <EXI_TriggerEdge+0x1e>
     4f2:	62 30       	cpi	r22, 0x02	; 2
     4f4:	89 f0       	breq	.+34     	; 0x518 <EXI_TriggerEdge+0x3a>
     4f6:	63 30       	cpi	r22, 0x03	; 3
     4f8:	b1 f0       	breq	.+44     	; 0x526 <EXI_TriggerEdge+0x48>
     4fa:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
     4fc:	85 b7       	in	r24, 0x35	; 53
     4fe:	8e 7f       	andi	r24, 0xFE	; 254
     500:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
     502:	85 b7       	in	r24, 0x35	; 53
     504:	8d 7f       	andi	r24, 0xFD	; 253
     506:	85 bf       	out	0x35, r24	; 53
			break;
     508:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
     50a:	85 b7       	in	r24, 0x35	; 53
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01); 
     510:	85 b7       	in	r24, 0x35	; 53
     512:	8d 7f       	andi	r24, 0xFD	; 253
     514:	85 bf       	out	0x35, r24	; 53
			break;
     516:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
     518:	85 b7       	in	r24, 0x35	; 53
     51a:	8e 7f       	andi	r24, 0xFE	; 254
     51c:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     51e:	85 b7       	in	r24, 0x35	; 53
     520:	82 60       	ori	r24, 0x02	; 2
     522:	85 bf       	out	0x35, r24	; 53
			 break;
     524:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	81 60       	ori	r24, 0x01	; 1
     52a:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	85 bf       	out	0x35, r24	; 53
			 break;
     532:	08 95       	ret
		}
		break;
		case EX_INT1:
		switch(edge)
     534:	61 30       	cpi	r22, 0x01	; 1
     536:	69 f0       	breq	.+26     	; 0x552 <EXI_TriggerEdge+0x74>
     538:	28 f0       	brcs	.+10     	; 0x544 <EXI_TriggerEdge+0x66>
     53a:	62 30       	cpi	r22, 0x02	; 2
     53c:	89 f0       	breq	.+34     	; 0x560 <EXI_TriggerEdge+0x82>
     53e:	63 30       	cpi	r22, 0x03	; 3
     540:	b1 f0       	breq	.+44     	; 0x56e <EXI_TriggerEdge+0x90>
     542:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
     544:	85 b7       	in	r24, 0x35	; 53
     546:	8b 7f       	andi	r24, 0xFB	; 251
     548:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     54a:	85 b7       	in	r24, 0x35	; 53
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	85 bf       	out	0x35, r24	; 53
     550:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
     552:	85 b7       	in	r24, 0x35	; 53
     554:	84 60       	ori	r24, 0x04	; 4
     556:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     558:	85 b7       	in	r24, 0x35	; 53
     55a:	87 7f       	andi	r24, 0xF7	; 247
     55c:	85 bf       	out	0x35, r24	; 53
     55e:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
     560:	85 b7       	in	r24, 0x35	; 53
     562:	8b 7f       	andi	r24, 0xFB	; 251
     564:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     566:	85 b7       	in	r24, 0x35	; 53
     568:	88 60       	ori	r24, 0x08	; 8
     56a:	85 bf       	out	0x35, r24	; 53
     56c:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
     56e:	85 b7       	in	r24, 0x35	; 53
     570:	84 60       	ori	r24, 0x04	; 4
     572:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     574:	85 b7       	in	r24, 0x35	; 53
     576:	88 60       	ori	r24, 0x08	; 8
     578:	85 bf       	out	0x35, r24	; 53
     57a:	08 95       	ret
		}
		break;
		case EX_INT2:
		switch(edge)
     57c:	62 30       	cpi	r22, 0x02	; 2
     57e:	19 f0       	breq	.+6      	; 0x586 <EXI_TriggerEdge+0xa8>
     580:	63 30       	cpi	r22, 0x03	; 3
     582:	29 f0       	breq	.+10     	; 0x58e <EXI_TriggerEdge+0xb0>
     584:	08 95       	ret
			break;
			case  ANY_LOGIC_CHANGE:
		 /*DO nothing OR set default */
			break;
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
     586:	84 b7       	in	r24, 0x34	; 52
     588:	8f 7b       	andi	r24, 0xBF	; 191
     58a:	84 bf       	out	0x34, r24	; 52
			 break;
     58c:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2); 
     58e:	84 b7       	in	r24, 0x34	; 52
     590:	80 64       	ori	r24, 0x40	; 64
     592:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
	
}
     594:	08 95       	ret

00000596 <__vector_1>:
*/



ISR(INT0_VECTOR)
{    
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	8f 93       	push	r24
	FLAG++;                 
     5a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
	 if(FLAG==8)
     5a8:	88 30       	cpi	r24, 0x08	; 8
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <__vector_1+0x1c>



ISR(INT0_VECTOR)
{    
	FLAG++;                 
     5ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <FLAG>
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__vector_1+0x20>
	 if(FLAG==8)
	{
		FLAG=0;
     5b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <FLAG>
	}
	
}
     5b6:	8f 91       	pop	r24
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_2>:

ISR(INT1_VECTOR)
{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	8f 93       	push	r24
	blink_mode++;
     5ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
	if(blink_mode==5)
     5d4:	85 30       	cpi	r24, 0x05	; 5
     5d6:	19 f0       	breq	.+6      	; 0x5de <__vector_2+0x1c>
	
}

ISR(INT1_VECTOR)
{
	blink_mode++;
     5d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <blink_mode>
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__vector_2+0x20>
	if(blink_mode==5)
	{
		blink_mode=0;
     5de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <blink_mode>
	}
}
     5e2:	8f 91       	pop	r24
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_11>:

ISR(TIMER0_OVF_VECTOR)
{
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31
	
	if(blink_mode==0)
     610:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     614:	81 11       	cpse	r24, r1
     616:	23 c1       	rjmp	.+582    	; 0x85e <__vector_11+0x270>
	{
		counter++;
     618:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     622:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     626:	91 30       	cpi	r25, 0x01	; 1
     628:	b9 f4       	brne	.+46     	; 0x658 <__vector_11+0x6a>
	{
		if( counter==5)
     62a:	85 30       	cpi	r24, 0x05	; 5
     62c:	49 f4       	brne	.+18     	; 0x640 <__vector_11+0x52>
	      {
			DIO_WRITEPIN(pina0,LOW);	
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     63e:	0c c0       	rjmp	.+24     	; 0x658 <__vector_11+0x6a>
	        }
	else if(counter==60)
     640:	8c 33       	cpi	r24, 0x3C	; 60
     642:	09 f0       	breq	.+2      	; 0x646 <__vector_11+0x58>
     644:	58 c0       	rjmp	.+176    	; 0x6f6 <__vector_11+0x108>
	       {
		DIO_TogglePin(pina0);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
		counter=0;
     64c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		timer0_SetCounter(6);
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
	     }
	}
	if(FLAG==2)
     658:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	01 f5       	brne	.+64     	; 0x6a0 <__vector_11+0xb2>
	{
		if( counter==5)
     660:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	69 f4       	brne	.+26     	; 0x682 <__vector_11+0x94>
		{
			DIO_WRITEPIN(pina1,LOW);
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     680:	0f c0       	rjmp	.+30     	; 0x6a0 <__vector_11+0xb2>
		}
		else if(counter==60)
     682:	8c 33       	cpi	r24, 0x3C	; 60
     684:	09 f0       	breq	.+2      	; 0x688 <__vector_11+0x9a>
     686:	69 c0       	rjmp	.+210    	; 0x75a <__vector_11+0x16c>
		{
			DIO_TogglePin(pina1);
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     694:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     6a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	39 f5       	brne	.+78     	; 0x6f6 <__vector_11+0x108>
	{
		if( counter==5)
     6a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     6ac:	85 30       	cpi	r24, 0x05	; 5
     6ae:	89 f4       	brne	.+34     	; 0x6d2 <__vector_11+0xe4>
		{
			DIO_WRITEPIN(pina2,LOW);
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     6c8:	86 e0       	ldi	r24, 0x06	; 6
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     6d0:	12 c0       	rjmp	.+36     	; 0x6f6 <__vector_11+0x108>
		}
		else if(counter==60)
     6d2:	8c 33       	cpi	r24, 0x3C	; 60
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_11+0xea>
     6d6:	70 c0       	rjmp	.+224    	; 0x7b8 <__vector_11+0x1ca>
		{
			DIO_TogglePin(pina2);
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     6ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     6f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     6fa:	84 30       	cpi	r24, 0x04	; 4
     6fc:	71 f5       	brne	.+92     	; 0x75a <__vector_11+0x16c>
	{
		if( counter==5)
     6fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     702:	85 30       	cpi	r24, 0x05	; 5
     704:	a9 f4       	brne	.+42     	; 0x730 <__vector_11+0x142>
		{
			DIO_WRITEPIN(pina3,LOW);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     72e:	15 c0       	rjmp	.+42     	; 0x75a <__vector_11+0x16c>
		}
		else if(counter==60)
     730:	8c 33       	cpi	r24, 0x3C	; 60
     732:	09 f0       	breq	.+2      	; 0x736 <__vector_11+0x148>
     734:	6c c0       	rjmp	.+216    	; 0x80e <__vector_11+0x220>
		{
			DIO_TogglePin(pina3);
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     74e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     75a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     75e:	85 30       	cpi	r24, 0x05	; 5
     760:	59 f5       	brne	.+86     	; 0x7b8 <__vector_11+0x1ca>
	{
		if( counter==5)
     762:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     766:	85 30       	cpi	r24, 0x05	; 5
     768:	a9 f4       	brne	.+42     	; 0x794 <__vector_11+0x1a6>
		{
			DIO_WRITEPIN(pina3,LOW);
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     78a:	86 e0       	ldi	r24, 0x06	; 6
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <__vector_11+0x1ca>
		}
		else if(counter==60)
     794:	8c 33       	cpi	r24, 0x3C	; 60
     796:	09 f0       	breq	.+2      	; 0x79a <__vector_11+0x1ac>
     798:	62 c0       	rjmp	.+196    	; 0x85e <__vector_11+0x270>
		{
			DIO_TogglePin(pina3);
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     7ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     7b0:	86 e0       	ldi	r24, 0x06	; 6
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     7b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     7bc:	86 30       	cpi	r24, 0x06	; 6
     7be:	39 f5       	brne	.+78     	; 0x80e <__vector_11+0x220>
	{
		if( counter==5)
     7c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	a9 f4       	brne	.+42     	; 0x7f2 <__vector_11+0x204>
		{
			DIO_WRITEPIN(pina3,LOW);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     7e8:	86 e0       	ldi	r24, 0x06	; 6
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     7f0:	0e c0       	rjmp	.+28     	; 0x80e <__vector_11+0x220>
		}
		else if(counter==60)
     7f2:	8c 33       	cpi	r24, 0x3C	; 60
     7f4:	a1 f5       	brne	.+104    	; 0x85e <__vector_11+0x270>
		{
			DIO_TogglePin(pina3);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     802:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     806:	86 e0       	ldi	r24, 0x06	; 6
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     80e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     812:	87 30       	cpi	r24, 0x07	; 7
     814:	21 f5       	brne	.+72     	; 0x85e <__vector_11+0x270>
	{
		if( counter==5)
     816:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     81a:	85 30       	cpi	r24, 0x05	; 5
     81c:	a9 f4       	brne	.+42     	; 0x848 <__vector_11+0x25a>
		{
			DIO_WRITEPIN(pina3,LOW);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     846:	0b c0       	rjmp	.+22     	; 0x85e <__vector_11+0x270>
		}
		else if(counter==60)
     848:	8c 33       	cpi	r24, 0x3C	; 60
     84a:	49 f4       	brne	.+18     	; 0x85e <__vector_11+0x270>
		{
			DIO_TogglePin(pina3);
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     852:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     856:	86 e0       	ldi	r24, 0x06	; 6
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	}
/******************************************************************/

	if(blink_mode==1)
     85e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	09 f0       	breq	.+2      	; 0x868 <__stack+0x9>
     866:	23 c1       	rjmp	.+582    	; 0xaae <__stack+0x24f>
	{
		counter++;
     868:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(FLAG==1)
     872:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     876:	91 30       	cpi	r25, 0x01	; 1
     878:	b9 f4       	brne	.+46     	; 0x8a8 <__stack+0x49>
		{
			if( counter==12)
     87a:	8c 30       	cpi	r24, 0x0C	; 12
     87c:	49 f4       	brne	.+18     	; 0x890 <__stack+0x31>
			{
				DIO_WRITEPIN(pina0,LOW);
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     88e:	0c c0       	rjmp	.+24     	; 0x8a8 <__stack+0x49>
			}
			else if(counter==60)
     890:	8c 33       	cpi	r24, 0x3C	; 60
     892:	09 f0       	breq	.+2      	; 0x896 <__stack+0x37>
     894:	58 c0       	rjmp	.+176    	; 0x946 <__stack+0xe7>
			{
				DIO_TogglePin(pina0);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     89c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==2)
     8a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	01 f5       	brne	.+64     	; 0x8f0 <__stack+0x91>
		{
			if( counter==12)
     8b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     8b4:	8c 30       	cpi	r24, 0x0C	; 12
     8b6:	69 f4       	brne	.+26     	; 0x8d2 <__stack+0x73>
			{
				DIO_WRITEPIN(pina1,LOW);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <__stack+0x91>
			}
			else if(counter==60)
     8d2:	8c 33       	cpi	r24, 0x3C	; 60
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	69 c0       	rjmp	.+210    	; 0x9aa <__stack+0x14b>
			{
				DIO_TogglePin(pina1);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     8e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     8e8:	86 e0       	ldi	r24, 0x06	; 6
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==3)
     8f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	39 f5       	brne	.+78     	; 0x946 <__stack+0xe7>
		{
			if( counter==12)
     8f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     8fc:	8c 30       	cpi	r24, 0x0C	; 12
     8fe:	89 f4       	brne	.+34     	; 0x922 <__stack+0xc3>
			{
				DIO_WRITEPIN(pina2,LOW);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     920:	12 c0       	rjmp	.+36     	; 0x946 <__stack+0xe7>
			}
			else if(counter==60)
     922:	8c 33       	cpi	r24, 0x3C	; 60
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0xc9>
     926:	70 c0       	rjmp	.+224    	; 0xa08 <__stack+0x1a9>
			{
				DIO_TogglePin(pina2);
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     93a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==4)
     946:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     94a:	84 30       	cpi	r24, 0x04	; 4
     94c:	71 f5       	brne	.+92     	; 0x9aa <__stack+0x14b>
		{
			if( counter==12)
     94e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     952:	8c 30       	cpi	r24, 0x0C	; 12
     954:	a9 f4       	brne	.+42     	; 0x980 <__stack+0x121>
			{
				DIO_WRITEPIN(pina3,LOW);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     97e:	15 c0       	rjmp	.+42     	; 0x9aa <__stack+0x14b>
			}
			else if(counter==60)
     980:	8c 33       	cpi	r24, 0x3C	; 60
     982:	09 f0       	breq	.+2      	; 0x986 <__stack+0x127>
     984:	6c c0       	rjmp	.+216    	; 0xa5e <__stack+0x1ff>
			{
				DIO_TogglePin(pina3);
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     99e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==5)
     9aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     9ae:	85 30       	cpi	r24, 0x05	; 5
     9b0:	59 f5       	brne	.+86     	; 0xa08 <__stack+0x1a9>
		{
			if( counter==12)
     9b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     9b6:	8c 30       	cpi	r24, 0x0C	; 12
     9b8:	a9 f4       	brne	.+42     	; 0x9e4 <__stack+0x185>
			{
				DIO_WRITEPIN(pina3,LOW);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     9e2:	12 c0       	rjmp	.+36     	; 0xa08 <__stack+0x1a9>
			}
			else if(counter==60)
     9e4:	8c 33       	cpi	r24, 0x3C	; 60
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0x18b>
     9e8:	62 c0       	rjmp	.+196    	; 0xaae <__stack+0x24f>
			{
				DIO_TogglePin(pina3);
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     9fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     a00:	86 e0       	ldi	r24, 0x06	; 6
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==6)
     a08:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	39 f5       	brne	.+78     	; 0xa5e <__stack+0x1ff>
		{
			if( counter==12)
     a10:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     a14:	8c 30       	cpi	r24, 0x0C	; 12
     a16:	a9 f4       	brne	.+42     	; 0xa42 <__stack+0x1e3>
			{
				DIO_WRITEPIN(pina3,LOW);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				timer0_SetCounter(6);
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <__stack+0x1ff>
			}
			else if(counter==60)
     a42:	8c 33       	cpi	r24, 0x3C	; 60
     a44:	a1 f5       	brne	.+104    	; 0xaae <__stack+0x24f>
			{
				DIO_TogglePin(pina3);
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     a52:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
		if(FLAG==7)
     a5e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     a62:	87 30       	cpi	r24, 0x07	; 7
     a64:	21 f5       	brne	.+72     	; 0xaae <__stack+0x24f>
		{
			if( counter==12)
     a66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     a6a:	8c 30       	cpi	r24, 0x0C	; 12
     a6c:	a9 f4       	brne	.+42     	; 0xa98 <__stack+0x239>
			{
				DIO_WRITEPIN(pina3,LOW);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			    timer0_SetCounter(6);
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     a96:	0b c0       	rjmp	.+22     	; 0xaae <__stack+0x24f>
			}
			else if(counter==60)
     a98:	8c 33       	cpi	r24, 0x3C	; 60
     a9a:	49 f4       	brne	.+18     	; 0xaae <__stack+0x24f>
			{
				DIO_TogglePin(pina3);
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
				counter=0;
     aa2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
			}
		}
	}
/****************************************************************************************/
if(blink_mode==2)
     aae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__stack+0x259>
     ab6:	23 c1       	rjmp	.+582    	; 0xcfe <__stack+0x49f>
{
	counter++;
     ab8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     ac2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     ac6:	91 30       	cpi	r25, 0x01	; 1
     ac8:	b9 f4       	brne	.+46     	; 0xaf8 <__stack+0x299>
	{
		if( counter==17)
     aca:	81 31       	cpi	r24, 0x11	; 17
     acc:	49 f4       	brne	.+18     	; 0xae0 <__stack+0x281>
		{
			DIO_WRITEPIN(pina0,LOW);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     ade:	0c c0       	rjmp	.+24     	; 0xaf8 <__stack+0x299>
		}
		else if(counter==60)
     ae0:	8c 33       	cpi	r24, 0x3C	; 60
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__stack+0x287>
     ae4:	58 c0       	rjmp	.+176    	; 0xb96 <__stack+0x337>
		{
			DIO_TogglePin(pina0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     aec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     af8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	01 f5       	brne	.+64     	; 0xb40 <__stack+0x2e1>
	{
		if( counter==17)
     b00:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     b04:	81 31       	cpi	r24, 0x11	; 17
     b06:	69 f4       	brne	.+26     	; 0xb22 <__stack+0x2c3>
		{
			DIO_WRITEPIN(pina1,LOW);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     b20:	0f c0       	rjmp	.+30     	; 0xb40 <__stack+0x2e1>
		}
		else if(counter==60)
     b22:	8c 33       	cpi	r24, 0x3C	; 60
     b24:	09 f0       	breq	.+2      	; 0xb28 <__stack+0x2c9>
     b26:	69 c0       	rjmp	.+210    	; 0xbfa <__stack+0x39b>
		{
			DIO_TogglePin(pina1);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     b34:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     b40:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	39 f5       	brne	.+78     	; 0xb96 <__stack+0x337>
	{
		if( counter==17)
     b48:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     b4c:	81 31       	cpi	r24, 0x11	; 17
     b4e:	89 f4       	brne	.+34     	; 0xb72 <__stack+0x313>
		{
			DIO_WRITEPIN(pina2,LOW);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     b70:	12 c0       	rjmp	.+36     	; 0xb96 <__stack+0x337>
		}
		else if(counter==60)
     b72:	8c 33       	cpi	r24, 0x3C	; 60
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x319>
     b76:	70 c0       	rjmp	.+224    	; 0xc58 <__stack+0x3f9>
		{
			DIO_TogglePin(pina2);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     b8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     b96:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	71 f5       	brne	.+92     	; 0xbfa <__stack+0x39b>
	{
		if( counter==17)
     b9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     ba2:	81 31       	cpi	r24, 0x11	; 17
     ba4:	a9 f4       	brne	.+42     	; 0xbd0 <__stack+0x371>
		{
			DIO_WRITEPIN(pina3,LOW);
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     bce:	15 c0       	rjmp	.+42     	; 0xbfa <__stack+0x39b>
		}
		else if(counter==60)
     bd0:	8c 33       	cpi	r24, 0x3C	; 60
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__stack+0x377>
     bd4:	6c c0       	rjmp	.+216    	; 0xcae <__stack+0x44f>
		{
			DIO_TogglePin(pina3);
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     bee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     bfa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     bfe:	85 30       	cpi	r24, 0x05	; 5
     c00:	59 f5       	brne	.+86     	; 0xc58 <__stack+0x3f9>
	{
		if( counter==17)
     c02:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     c06:	81 31       	cpi	r24, 0x11	; 17
     c08:	a9 f4       	brne	.+42     	; 0xc34 <__stack+0x3d5>
		{
			DIO_WRITEPIN(pina3,LOW);
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     c2a:	86 e0       	ldi	r24, 0x06	; 6
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     c32:	12 c0       	rjmp	.+36     	; 0xc58 <__stack+0x3f9>
		}
		else if(counter==60)
     c34:	8c 33       	cpi	r24, 0x3C	; 60
     c36:	09 f0       	breq	.+2      	; 0xc3a <__stack+0x3db>
     c38:	62 c0       	rjmp	.+196    	; 0xcfe <__stack+0x49f>
		{
			DIO_TogglePin(pina3);
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     c4c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     c50:	86 e0       	ldi	r24, 0x06	; 6
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     c58:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     c5c:	86 30       	cpi	r24, 0x06	; 6
     c5e:	39 f5       	brne	.+78     	; 0xcae <__stack+0x44f>
	{
		if( counter==17)
     c60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     c64:	81 31       	cpi	r24, 0x11	; 17
     c66:	a9 f4       	brne	.+42     	; 0xc92 <__stack+0x433>
		{
			DIO_WRITEPIN(pina3,LOW);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     c90:	0e c0       	rjmp	.+28     	; 0xcae <__stack+0x44f>
		}
		else if(counter==60)
     c92:	8c 33       	cpi	r24, 0x3C	; 60
     c94:	a1 f5       	brne	.+104    	; 0xcfe <__stack+0x49f>
		{
			DIO_TogglePin(pina3);
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     ca2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     cae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     cb2:	87 30       	cpi	r24, 0x07	; 7
     cb4:	21 f5       	brne	.+72     	; 0xcfe <__stack+0x49f>
	{
		if( counter==17)
     cb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     cba:	81 31       	cpi	r24, 0x11	; 17
     cbc:	a9 f4       	brne	.+42     	; 0xce8 <__stack+0x489>
		{
			DIO_WRITEPIN(pina3,LOW);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     cde:	86 e0       	ldi	r24, 0x06	; 6
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     ce6:	0b c0       	rjmp	.+22     	; 0xcfe <__stack+0x49f>
		}
		else if(counter==60)
     ce8:	8c 33       	cpi	r24, 0x3C	; 60
     cea:	49 f4       	brne	.+18     	; 0xcfe <__stack+0x49f>
		{
			DIO_TogglePin(pina3);
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     cf2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
}
/**********************************************************************************/
if(blink_mode==3)
     cfe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	23 c1       	rjmp	.+582    	; 0xf4e <__stack+0x6ef>
{
	counter++;
     d08:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     d12:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     d16:	91 30       	cpi	r25, 0x01	; 1
     d18:	b9 f4       	brne	.+46     	; 0xd48 <__stack+0x4e9>
	{
		if( counter==30)
     d1a:	8e 31       	cpi	r24, 0x1E	; 30
     d1c:	49 f4       	brne	.+18     	; 0xd30 <__stack+0x4d1>
		{
			DIO_WRITEPIN(pina0,LOW);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     d26:	86 e0       	ldi	r24, 0x06	; 6
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     d2e:	0c c0       	rjmp	.+24     	; 0xd48 <__stack+0x4e9>
		}
		else if(counter==60)
     d30:	8c 33       	cpi	r24, 0x3C	; 60
     d32:	09 f0       	breq	.+2      	; 0xd36 <__stack+0x4d7>
     d34:	58 c0       	rjmp	.+176    	; 0xde6 <__stack+0x587>
		{
			DIO_TogglePin(pina0);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     d3c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     d40:	86 e0       	ldi	r24, 0x06	; 6
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     d48:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	01 f5       	brne	.+64     	; 0xd90 <__stack+0x531>
	{
		if( counter==30)
     d50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     d54:	8e 31       	cpi	r24, 0x1E	; 30
     d56:	69 f4       	brne	.+26     	; 0xd72 <__stack+0x513>
		{
			DIO_WRITEPIN(pina1,LOW);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <__stack+0x531>
		}
		else if(counter==60)
     d72:	8c 33       	cpi	r24, 0x3C	; 60
     d74:	09 f0       	breq	.+2      	; 0xd78 <__stack+0x519>
     d76:	69 c0       	rjmp	.+210    	; 0xe4a <__stack+0x5eb>
		{
			DIO_TogglePin(pina1);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     d84:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     d90:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	39 f5       	brne	.+78     	; 0xde6 <__stack+0x587>
	{
		if( counter==30)
     d98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     d9c:	8e 31       	cpi	r24, 0x1E	; 30
     d9e:	89 f4       	brne	.+34     	; 0xdc2 <__stack+0x563>
		{
			DIO_WRITEPIN(pina2,LOW);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     dc0:	12 c0       	rjmp	.+36     	; 0xde6 <__stack+0x587>
		}
		else if(counter==60)
     dc2:	8c 33       	cpi	r24, 0x3C	; 60
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <__stack+0x569>
     dc6:	70 c0       	rjmp	.+224    	; 0xea8 <__stack+0x649>
		{
			DIO_TogglePin(pina2);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     dda:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     de6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	71 f5       	brne	.+92     	; 0xe4a <__stack+0x5eb>
	{
		if( counter==30)
     dee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     df2:	8e 31       	cpi	r24, 0x1E	; 30
     df4:	a9 f4       	brne	.+42     	; 0xe20 <__stack+0x5c1>
		{
			DIO_WRITEPIN(pina3,LOW);
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     e16:	86 e0       	ldi	r24, 0x06	; 6
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     e1e:	15 c0       	rjmp	.+42     	; 0xe4a <__stack+0x5eb>
		}
		else if(counter==60)
     e20:	8c 33       	cpi	r24, 0x3C	; 60
     e22:	09 f0       	breq	.+2      	; 0xe26 <__stack+0x5c7>
     e24:	6c c0       	rjmp	.+216    	; 0xefe <__stack+0x69f>
		{
			DIO_TogglePin(pina3);
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     e3e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     e4a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     e4e:	85 30       	cpi	r24, 0x05	; 5
     e50:	59 f5       	brne	.+86     	; 0xea8 <__stack+0x649>
	{
		if( counter==30)
     e52:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     e56:	8e 31       	cpi	r24, 0x1E	; 30
     e58:	a9 f4       	brne	.+42     	; 0xe84 <__stack+0x625>
		{
			DIO_WRITEPIN(pina3,LOW);
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <__stack+0x649>
		}
		else if(counter==60)
     e84:	8c 33       	cpi	r24, 0x3C	; 60
     e86:	09 f0       	breq	.+2      	; 0xe8a <__stack+0x62b>
     e88:	62 c0       	rjmp	.+196    	; 0xf4e <__stack+0x6ef>
		{
			DIO_TogglePin(pina3);
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     e9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     ea8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     eac:	86 30       	cpi	r24, 0x06	; 6
     eae:	39 f5       	brne	.+78     	; 0xefe <__stack+0x69f>
	{
		if( counter==30)
     eb0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     eb4:	8e 31       	cpi	r24, 0x1E	; 30
     eb6:	a9 f4       	brne	.+42     	; 0xee2 <__stack+0x683>
		{
			DIO_WRITEPIN(pina3,LOW);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     ed8:	86 e0       	ldi	r24, 0x06	; 6
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     ee0:	0e c0       	rjmp	.+28     	; 0xefe <__stack+0x69f>
		}
		else if(counter==60)
     ee2:	8c 33       	cpi	r24, 0x3C	; 60
     ee4:	a1 f5       	brne	.+104    	; 0xf4e <__stack+0x6ef>
		{
			DIO_TogglePin(pina3);
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     ef2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     ef6:	86 e0       	ldi	r24, 0x06	; 6
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     efe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	21 f5       	brne	.+72     	; 0xf4e <__stack+0x6ef>
	{
		if( counter==30)
     f06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     f0a:	8e 31       	cpi	r24, 0x1E	; 30
     f0c:	a9 f4       	brne	.+42     	; 0xf38 <__stack+0x6d9>
		{
			DIO_WRITEPIN(pina3,LOW);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     f36:	0b c0       	rjmp	.+22     	; 0xf4e <__stack+0x6ef>
		}
		else if(counter==60)
     f38:	8c 33       	cpi	r24, 0x3C	; 60
     f3a:	49 f4       	brne	.+18     	; 0xf4e <__stack+0x6ef>
		{
			DIO_TogglePin(pina3);
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     f42:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
}
/********************************************************************************************/
if(blink_mode==4)
     f4e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	09 f0       	breq	.+2      	; 0xf58 <__stack+0x6f9>
     f56:	23 c1       	rjmp	.+582    	; 0x119e <__stack+0x93f>
{
	counter++;
     f58:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     f62:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     f66:	91 30       	cpi	r25, 0x01	; 1
     f68:	b9 f4       	brne	.+46     	; 0xf98 <__stack+0x739>
	{
		if( counter==50)
     f6a:	82 33       	cpi	r24, 0x32	; 50
     f6c:	49 f4       	brne	.+18     	; 0xf80 <__stack+0x721>
		{
			DIO_WRITEPIN(pina0,LOW);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <__stack+0x739>
		}
		else if(counter==60)
     f80:	8c 33       	cpi	r24, 0x3C	; 60
     f82:	09 f0       	breq	.+2      	; 0xf86 <__stack+0x727>
     f84:	58 c0       	rjmp	.+176    	; 0x1036 <__stack+0x7d7>
		{
			DIO_TogglePin(pina0);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     f8c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     f98:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	01 f5       	brne	.+64     	; 0xfe0 <__stack+0x781>
	{
		if( counter==50)
     fa0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     fa4:	82 33       	cpi	r24, 0x32	; 50
     fa6:	69 f4       	brne	.+26     	; 0xfc2 <__stack+0x763>
		{
			DIO_WRITEPIN(pina1,LOW);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
     fb8:	86 e0       	ldi	r24, 0x06	; 6
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <__stack+0x781>
		}
		else if(counter==60)
     fc2:	8c 33       	cpi	r24, 0x3C	; 60
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <__stack+0x769>
     fc6:	69 c0       	rjmp	.+210    	; 0x109a <__stack+0x83b>
		{
			DIO_TogglePin(pina1);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
     fd4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     fe0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	39 f5       	brne	.+78     	; 0x1036 <__stack+0x7d7>
	{
		if( counter==50)
     fe8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     fec:	82 33       	cpi	r24, 0x32	; 50
     fee:	89 f4       	brne	.+34     	; 0x1012 <__stack+0x7b3>
		{
			DIO_WRITEPIN(pina2,LOW);
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
    1010:	12 c0       	rjmp	.+36     	; 0x1036 <__stack+0x7d7>
		}
		else if(counter==60)
    1012:	8c 33       	cpi	r24, 0x3C	; 60
    1014:	09 f0       	breq	.+2      	; 0x1018 <__stack+0x7b9>
    1016:	70 c0       	rjmp	.+224    	; 0x10f8 <__stack+0x899>
		{
			DIO_TogglePin(pina2);
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
    102a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    102e:	86 e0       	ldi	r24, 0x06	; 6
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==4)
    1036:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	71 f5       	brne	.+92     	; 0x109a <__stack+0x83b>
	{
		if( counter==50)
    103e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1042:	82 33       	cpi	r24, 0x32	; 50
    1044:	a9 f4       	brne	.+42     	; 0x1070 <__stack+0x811>
		{
			DIO_WRITEPIN(pina3,LOW);
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
    106e:	15 c0       	rjmp	.+42     	; 0x109a <__stack+0x83b>
		}
		else if(counter==60)
    1070:	8c 33       	cpi	r24, 0x3C	; 60
    1072:	09 f0       	breq	.+2      	; 0x1076 <__stack+0x817>
    1074:	6c c0       	rjmp	.+216    	; 0x114e <__stack+0x8ef>
		{
			DIO_TogglePin(pina3);
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina0);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
    108e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1092:	86 e0       	ldi	r24, 0x06	; 6
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==5)
    109a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	59 f5       	brne	.+86     	; 0x10f8 <__stack+0x899>
	{
		if( counter==50)
    10a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    10a6:	82 33       	cpi	r24, 0x32	; 50
    10a8:	a9 f4       	brne	.+42     	; 0x10d4 <__stack+0x875>
		{
			DIO_WRITEPIN(pina3,LOW);
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
    10d2:	12 c0       	rjmp	.+36     	; 0x10f8 <__stack+0x899>
		}
		else if(counter==60)
    10d4:	8c 33       	cpi	r24, 0x3C	; 60
    10d6:	09 f0       	breq	.+2      	; 0x10da <__stack+0x87b>
    10d8:	62 c0       	rjmp	.+196    	; 0x119e <__stack+0x93f>
		{
			DIO_TogglePin(pina3);
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
    10ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    10f0:	86 e0       	ldi	r24, 0x06	; 6
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==6)
    10f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	39 f5       	brne	.+78     	; 0x114e <__stack+0x8ef>
	{
		if( counter==50)
    1100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1104:	82 33       	cpi	r24, 0x32	; 50
    1106:	a9 f4       	brne	.+42     	; 0x1132 <__stack+0x8d3>
		{
			DIO_WRITEPIN(pina3,LOW);
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__stack+0x8ef>
		}
		else if(counter==60)
    1132:	8c 33       	cpi	r24, 0x3C	; 60
    1134:	a1 f5       	brne	.+104    	; 0x119e <__stack+0x93f>
		{
			DIO_TogglePin(pina3);
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
    1142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1146:	86 e0       	ldi	r24, 0x06	; 6
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
	if(FLAG==7)
    114e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    1152:	87 30       	cpi	r24, 0x07	; 7
    1154:	21 f5       	brne	.+72     	; 0x119e <__stack+0x93f>
	{
		if( counter==50)
    1156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    115a:	82 33       	cpi	r24, 0x32	; 50
    115c:	a9 f4       	brne	.+42     	; 0x1188 <__stack+0x929>
		{
			DIO_WRITEPIN(pina3,LOW);
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_WRITEPIN>
			timer0_SetCounter(6);
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
    1186:	0b c0       	rjmp	.+22     	; 0x119e <__stack+0x93f>
		}
		else if(counter==60)
    1188:	8c 33       	cpi	r24, 0x3C	; 60
    118a:	49 f4       	brne	.+18     	; 0x119e <__stack+0x93f>
		{
			DIO_TogglePin(pina3);
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_TogglePin>
			counter=0;
    1192:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 81 09 	call	0x1302	; 0x1302 <timer0_SetCounter>
		}
	}
}
}
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <Timer0_Init>:

/*this function give the HAL layer the appilty to choose the timer mode, it's scaller,
  and if it want a compare match feature or not*/
void Timer0_Init(Timer0Mode_type mode, Timer0SCALER_type scaler,OC0Mode_type oc_mode )
{
	switch(mode)
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	69 f0       	breq	.+26     	; 0x11de <Timer0_Init+0x1e>
    11c4:	28 f0       	brcs	.+10     	; 0x11d0 <Timer0_Init+0x10>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	89 f0       	breq	.+34     	; 0x11ec <Timer0_Init+0x2c>
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <Timer0_Init+0x3a>
    11ce:	1b c0       	rjmp	.+54     	; 0x1206 <Timer0_Init+0x46>
	{
		case TIMER0_NORMAL_MODE:
		clear_bit(TCCR0,WGM00);
    11d0:	83 b7       	in	r24, 0x33	; 51
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,WGM01);
    11d6:	83 b7       	in	r24, 0x33	; 51
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	83 bf       	out	0x33, r24	; 51
		break;
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <Timer0_Init+0x46>
		case TIMER0_PHASE_CORRECT_MODE:
		set_bit(TCCR0,WGM00);
    11de:	83 b7       	in	r24, 0x33	; 51
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,WGM01);
    11e4:	83 b7       	in	r24, 0x33	; 51
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	83 bf       	out	0x33, r24	; 51
		break;
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <Timer0_Init+0x46>
		case TIMER0_CTC_MODE:
		clear_bit(TCCR0,WGM00);
    11ec:	83 b7       	in	r24, 0x33	; 51
    11ee:	8f 7b       	andi	r24, 0xBF	; 191
    11f0:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,WGM01);
    11f2:	83 b7       	in	r24, 0x33	; 51
    11f4:	88 60       	ori	r24, 0x08	; 8
    11f6:	83 bf       	out	0x33, r24	; 51
		break;
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <Timer0_Init+0x46>
		case TIMER0_FASTPWM_MODE:
		set_bit(TCCR0,WGM00);
    11fa:	83 b7       	in	r24, 0x33	; 51
    11fc:	80 64       	ori	r24, 0x40	; 64
    11fe:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,WGM01);
    1200:	83 b7       	in	r24, 0x33	; 51
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
	switch(scaler)
    1206:	86 2f       	mov	r24, r22
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	91 05       	cpc	r25, r1
    120e:	08 f0       	brcs	.+2      	; 0x1212 <Timer0_Init+0x52>
    1210:	54 c0       	rjmp	.+168    	; 0x12ba <Timer0_Init+0xfa>
    1212:	fc 01       	movw	r30, r24
    1214:	e6 5d       	subi	r30, 0xD6	; 214
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	0c 94 87 09 	jmp	0x130e	; 0x130e <__tablejump2__>
	{
		case TIMER0_STOP:
		clear_bit(TCCR0,CS00);
    121c:	83 b7       	in	r24, 0x33	; 51
    121e:	8e 7f       	andi	r24, 0xFE	; 254
    1220:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS01);
    1222:	83 b7       	in	r24, 0x33	; 51
    1224:	8d 7f       	andi	r24, 0xFD	; 253
    1226:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS02);
    1228:	83 b7       	in	r24, 0x33	; 51
    122a:	8b 7f       	andi	r24, 0xFB	; 251
    122c:	83 bf       	out	0x33, r24	; 51
		break;
    122e:	45 c0       	rjmp	.+138    	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_SCALER_1:
		set_bit(TCCR0,CS00);
    1230:	83 b7       	in	r24, 0x33	; 51
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS01);
    1236:	83 b7       	in	r24, 0x33	; 51
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS02);
    123c:	83 b7       	in	r24, 0x33	; 51
    123e:	8b 7f       	andi	r24, 0xFB	; 251
    1240:	83 bf       	out	0x33, r24	; 51
		break;
    1242:	3b c0       	rjmp	.+118    	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_SCALER_8:
		clear_bit(TCCR0,CS00);
    1244:	83 b7       	in	r24, 0x33	; 51
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS01);
    124a:	83 b7       	in	r24, 0x33	; 51
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS02);
    1250:	83 b7       	in	r24, 0x33	; 51
    1252:	8b 7f       	andi	r24, 0xFB	; 251
    1254:	83 bf       	out	0x33, r24	; 51
		break;
    1256:	31 c0       	rjmp	.+98     	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_SCALER_64:
		set_bit(TCCR0,CS00);
    1258:	83 b7       	in	r24, 0x33	; 51
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS01);
    125e:	83 b7       	in	r24, 0x33	; 51
    1260:	82 60       	ori	r24, 0x02	; 2
    1262:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS02);
    1264:	83 b7       	in	r24, 0x33	; 51
    1266:	8b 7f       	andi	r24, 0xFB	; 251
    1268:	83 bf       	out	0x33, r24	; 51
		break;
    126a:	27 c0       	rjmp	.+78     	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_SCALER_256:
		clear_bit(TCCR0,CS00);
    126c:	83 b7       	in	r24, 0x33	; 51
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS01);
    1272:	83 b7       	in	r24, 0x33	; 51
    1274:	8d 7f       	andi	r24, 0xFD	; 253
    1276:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS02);
    1278:	83 b7       	in	r24, 0x33	; 51
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	83 bf       	out	0x33, r24	; 51
		break;
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_SCALER_1024:
		set_bit(TCCR0,CS00);
    1280:	83 b7       	in	r24, 0x33	; 51
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,CS01);
    1286:	83 b7       	in	r24, 0x33	; 51
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS02);
    128c:	83 b7       	in	r24, 0x33	; 51
    128e:	84 60       	ori	r24, 0x04	; 4
    1290:	83 bf       	out	0x33, r24	; 51
		break;
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_EXTERNAL_FALLING:
		clear_bit(TCCR0,CS00);
    1294:	83 b7       	in	r24, 0x33	; 51
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS01);
    129a:	83 b7       	in	r24, 0x33	; 51
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS02);
    12a0:	83 b7       	in	r24, 0x33	; 51
    12a2:	84 60       	ori	r24, 0x04	; 4
    12a4:	83 bf       	out	0x33, r24	; 51
		break;
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <Timer0_Init+0xfa>
		case TIMER0_EXTERNAL_RISING:
		set_bit(TCCR0,CS00);
    12a8:	83 b7       	in	r24, 0x33	; 51
    12aa:	81 60       	ori	r24, 0x01	; 1
    12ac:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS01);
    12ae:	83 b7       	in	r24, 0x33	; 51
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS02);
    12b4:	83 b7       	in	r24, 0x33	; 51
    12b6:	84 60       	ori	r24, 0x04	; 4
    12b8:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
	switch(oc_mode)
    12ba:	41 30       	cpi	r20, 0x01	; 1
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <Timer0_Init+0x118>
    12be:	28 f0       	brcs	.+10     	; 0x12ca <Timer0_Init+0x10a>
    12c0:	42 30       	cpi	r20, 0x02	; 2
    12c2:	89 f0       	breq	.+34     	; 0x12e6 <Timer0_Init+0x126>
    12c4:	43 30       	cpi	r20, 0x03	; 3
    12c6:	b1 f0       	breq	.+44     	; 0x12f4 <Timer0_Init+0x134>
    12c8:	08 95       	ret
	{
		case OC0_DISCONNECTED:
		clear_bit(TCCR0,COM00);
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,COM01);
    12d0:	83 b7       	in	r24, 0x33	; 51
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	83 bf       	out	0x33, r24	; 51
		break;
    12d6:	08 95       	ret
		case  OC0_TOGGLE:
		set_bit(TCCR0,COM00);
    12d8:	83 b7       	in	r24, 0x33	; 51
    12da:	80 61       	ori	r24, 0x10	; 16
    12dc:	83 bf       	out	0x33, r24	; 51
		clear_bit(TCCR0,COM01);
    12de:	83 b7       	in	r24, 0x33	; 51
    12e0:	8f 7d       	andi	r24, 0xDF	; 223
    12e2:	83 bf       	out	0x33, r24	; 51
		break;
    12e4:	08 95       	ret
		case OC0_NON_INVERTING:
		clear_bit(TCCR0,COM00);
    12e6:	83 b7       	in	r24, 0x33	; 51
    12e8:	8f 7e       	andi	r24, 0xEF	; 239
    12ea:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,COM01);
    12ec:	83 b7       	in	r24, 0x33	; 51
    12ee:	80 62       	ori	r24, 0x20	; 32
    12f0:	83 bf       	out	0x33, r24	; 51
		break;
    12f2:	08 95       	ret
		case  OC0_INVERTING:
		set_bit(TCCR0,COM00);
    12f4:	83 b7       	in	r24, 0x33	; 51
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,COM01);
    12fa:	83 b7       	in	r24, 0x33	; 51
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	83 bf       	out	0x33, r24	; 51
    1300:	08 95       	ret

00001302 <timer0_SetCounter>:
}
/*******************************************************************************************/
/* this function sets the offset of the timer for easier tick time and ovf calculations */
void timer0_SetCounter(uint8_t offset)
{
	TCNT0=offset;
    1302:	82 bf       	out	0x32, r24	; 50
    1304:	08 95       	ret

00001306 <Timer0_OVF_InterrupEnable>:
}
/****************************************************************************************/
/*it enables the over flow interrupt*/
void Timer0_OVF_InterrupEnable(void)
{
	set_bit(TIMSK,TOIE0);
    1306:	89 b7       	in	r24, 0x39	; 57
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	89 bf       	out	0x39, r24	; 57
    130c:	08 95       	ret

0000130e <__tablejump2__>:
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	05 90       	lpm	r0, Z+
    1314:	f4 91       	lpm	r31, Z
    1316:	e0 2d       	mov	r30, r0
    1318:	09 94       	ijmp

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
