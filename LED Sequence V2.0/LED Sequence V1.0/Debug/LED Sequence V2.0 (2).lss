
LED Sequence V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144c  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e6  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b4  00000000  00000000  000037ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 43 03 	jmp	0x686	; 0x686 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Button_INIT>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
  7c:	88 32       	cpi	r24, 0x28	; 40
  7e:	28 f4       	brcc	.+10     	; 0x8a <Button_INIT+0xe>
	{
		return INVALID_BUTTON_PIN_NUMBER;
	}
	else
	{
	DIO_INITPIN(PIN,INPLUP);
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_INITPIN>
	return VALID_BUTTON;
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_BUTTON_PORT;
  8a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
	DIO_INITPIN(PIN,INPLUP);
	return VALID_BUTTON;
	}
}
  8c:	08 95       	ret

0000008e <LED_INIT>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  8e:	88 32       	cpi	r24, 0x28	; 40
  90:	28 f4       	brcc	.+10     	; 0x9c <LED_INIT+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_INITPIN(PIN,OUTPUT);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_INITPIN>
	 return VALID_LED;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  9c:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_INITPIN(PIN,OUTPUT);
	 return VALID_LED;
	 }
 }
  9e:	08 95       	ret

000000a0 <LED_ON>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  a0:	88 32       	cpi	r24, 0x28	; 40
  a2:	28 f4       	brcc	.+10     	; 0xae <LED_ON+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_WRITEPIN(PIN,HIGH);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	0e 94 38 02 	call	0x470	; 0x470 <DIO_WRITEPIN>
	 return VALID_LED;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  ae:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_WRITEPIN(PIN,HIGH);
	 return VALID_LED;
	 }
 }
  b0:	08 95       	ret

000000b2 <LED_OFF>:
 {
	 DIO_PIN_TYPE PIN_NUM;
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
  b2:	88 32       	cpi	r24, 0x28	; 40
  b4:	28 f4       	brcc	.+10     	; 0xc0 <LED_OFF+0xe>
	 {
		 return INVLAID_LED_PIN_NUMBER;
	 }
	 else
	 {
	 DIO_WRITEPIN(PIN,LOW);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	0e 94 38 02 	call	0x470	; 0x470 <DIO_WRITEPIN>
	 return VALID_LED;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
	 DIO_PORT_TYPE PORT;
	 PORT=PIN/8;
	 PIN_NUM=PIN%8;
	 if(PORT>4)
	 {
		 return INVALID_LED_PORT;
  c0:	81 e0       	ldi	r24, 0x01	; 1
	 else
	 {
	 DIO_WRITEPIN(PIN,LOW);
	 return VALID_LED;
	 }
  c2:	08 95       	ret

000000c4 <main>:
#define   F_CPU 8000000UL            //FOR DELAY LIB
uint8_t FLAG=0;                      //SHARED RESOURCE FOR INTERRUPR
int main(void)
{
	/**********intializing LED*************/
	LED_INIT(pina0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina2);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	LED_INIT(pina3);
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 47 00 	call	0x8e	; 0x8e <LED_INIT>
	/*****************INTIALIZING INTERRUPT***********/
	sei();
  dc:	78 94       	sei
	Button_INIT(pind2);
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	0e 94 3e 00 	call	0x7c	; 0x7c <Button_INIT>
	EXI_TriggerEdge(EX_INT0,LOW_LEVEL);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EXI_Enable>
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x2e>

000000f4 <__vector_1>:
	}
}
	
	
ISR(INT0_VECTOR)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31

			if(FLAG==0)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11a:	81 11       	cpse	r24, r1
 11c:	11 c0       	rjmp	.+34     	; 0x140 <__vector_1+0x4c>
			{
				LED_ON(pina0);
 11e:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
				FLAG++;
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f e5       	ldi	r18, 0x5F	; 95
 12e:	8a ee       	ldi	r24, 0xEA	; 234
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_1+0x3e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_1+0x48>
 13c:	00 00       	nop
 13e:	85 c0       	rjmp	.+266    	; 0x24a <__vector_1+0x156>
				_delay_ms(300);
			}
			else if(FLAG==1)
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	89 f4       	brne	.+34     	; 0x166 <__vector_1+0x72>
			{
				LED_ON(pina1);
 144:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 148:	2f e5       	ldi	r18, 0x5F	; 95
 14a:	8a ee       	ldi	r24, 0xEA	; 234
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <__vector_1+0x5a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <__vector_1+0x64>
 158:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 164:	72 c0       	rjmp	.+228    	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==2)
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	89 f4       	brne	.+34     	; 0x18c <__vector_1+0x98>
			{
				LED_ON(pina2);
 16a:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 16e:	2f e5       	ldi	r18, 0x5F	; 95
 170:	8a ee       	ldi	r24, 0xEA	; 234
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <__vector_1+0x80>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <__vector_1+0x8a>
 17e:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 18a:	5f c0       	rjmp	.+190    	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==3)
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	89 f4       	brne	.+34     	; 0x1b2 <__vector_1+0xbe>
			{
				LED_ON(pina3);
 190:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_ON>
 194:	2f e5       	ldi	r18, 0x5F	; 95
 196:	8a ee       	ldi	r24, 0xEA	; 234
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <__vector_1+0xa6>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__vector_1+0xb0>
 1a4:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1b0:	4c c0       	rjmp	.+152    	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==4)
 1b2:	84 30       	cpi	r24, 0x04	; 4
 1b4:	91 f4       	brne	.+36     	; 0x1da <__vector_1+0xe6>
			{
				LED_OFF(pina0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 1bc:	2f e5       	ldi	r18, 0x5F	; 95
 1be:	8a ee       	ldi	r24, 0xEA	; 234
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__vector_1+0xce>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <__vector_1+0xd8>
 1cc:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1d8:	38 c0       	rjmp	.+112    	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==5)
 1da:	85 30       	cpi	r24, 0x05	; 5
 1dc:	91 f4       	brne	.+36     	; 0x202 <__vector_1+0x10e>
			{
				LED_OFF(pina1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 1e4:	2f e5       	ldi	r18, 0x5F	; 95
 1e6:	8a ee       	ldi	r24, 0xEA	; 234
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <__vector_1+0xf6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <__vector_1+0x100>
 1f4:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 200:	24 c0       	rjmp	.+72     	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==6)
 202:	86 30       	cpi	r24, 0x06	; 6
 204:	91 f4       	brne	.+36     	; 0x22a <__vector_1+0x136>
			{
				LED_OFF(pina2);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 20c:	2f e5       	ldi	r18, 0x5F	; 95
 20e:	8a ee       	ldi	r24, 0xEA	; 234
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <__vector_1+0x11e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__vector_1+0x128>
 21c:	00 00       	nop
				_delay_ms(300);
				FLAG++;
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 228:	10 c0       	rjmp	.+32     	; 0x24a <__vector_1+0x156>
			}
			else if(FLAG==7)
 22a:	87 30       	cpi	r24, 0x07	; 7
 22c:	71 f4       	brne	.+28     	; 0x24a <__vector_1+0x156>
			{
				LED_OFF(pina3);
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_OFF>
 234:	2f e5       	ldi	r18, 0x5F	; 95
 236:	8a ee       	ldi	r24, 0xEA	; 234
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <__vector_1+0x146>
 242:	00 c0       	rjmp	.+0      	; 0x244 <__vector_1+0x150>
 244:	00 00       	nop
				_delay_ms(300);
				FLAG=0;
 246:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			}
			
		
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
 26c:	98 2f       	mov	r25, r24
 26e:	96 95       	lsr	r25
 270:	96 95       	lsr	r25
 272:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
 274:	95 30       	cpi	r25, 0x05	; 5
 276:	08 f0       	brcs	.+2      	; 0x27a <DIO_INITPIN+0xe>
 278:	f9 c0       	rjmp	.+498    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
 27a:	87 70       	andi	r24, 0x07	; 7
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	31 f0       	breq	.+12     	; 0x28c <DIO_INITPIN+0x20>
 280:	08 f4       	brcc	.+2      	; 0x284 <DIO_INITPIN+0x18>
 282:	a4 c0       	rjmp	.+328    	; 0x3cc <DIO_INITPIN+0x160>
 284:	62 30       	cpi	r22, 0x02	; 2
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_INITPIN+0x1e>
 288:	51 c0       	rjmp	.+162    	; 0x32c <DIO_INITPIN+0xc0>
 28a:	ef c0       	rjmp	.+478    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	{
		case INFREE:
		switch(PORT)
 28c:	91 30       	cpi	r25, 0x01	; 1
 28e:	c1 f0       	breq	.+48     	; 0x2c0 <DIO_INITPIN+0x54>
 290:	28 f0       	brcs	.+10     	; 0x29c <DIO_INITPIN+0x30>
 292:	92 30       	cpi	r25, 0x02	; 2
 294:	39 f1       	breq	.+78     	; 0x2e4 <DIO_INITPIN+0x78>
 296:	93 30       	cpi	r25, 0x03	; 3
 298:	b9 f1       	breq	.+110    	; 0x308 <DIO_INITPIN+0x9c>
 29a:	e7 c0       	rjmp	.+462    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 29c:	4a b3       	in	r20, 0x1a	; 26
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_INITPIN+0x3e>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_INITPIN+0x3a>
 2ae:	cb 01       	movw	r24, r22
 2b0:	80 95       	com	r24
 2b2:	94 2f       	mov	r25, r20
 2b4:	98 23       	and	r25, r24
 2b6:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
 2b8:	9b b3       	in	r25, 0x1b	; 27
 2ba:	89 23       	and	r24, r25
 2bc:	8b bb       	out	0x1b, r24	; 27
			break;
 2be:	d5 c0       	rjmp	.+426    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			case PB:
			clear_bit(DDRB,PIN_NUM);
 2c0:	47 b3       	in	r20, 0x17	; 23
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_INITPIN+0x62>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_INITPIN+0x5e>
 2d2:	cb 01       	movw	r24, r22
 2d4:	80 95       	com	r24
 2d6:	94 2f       	mov	r25, r20
 2d8:	98 23       	and	r25, r24
 2da:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
 2dc:	98 b3       	in	r25, 0x18	; 24
 2de:	89 23       	and	r24, r25
 2e0:	88 bb       	out	0x18, r24	; 24
			break;
 2e2:	c3 c0       	rjmp	.+390    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 2e4:	44 b3       	in	r20, 0x14	; 20
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_INITPIN+0x86>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_INITPIN+0x82>
 2f6:	cb 01       	movw	r24, r22
 2f8:	80 95       	com	r24
 2fa:	94 2f       	mov	r25, r20
 2fc:	98 23       	and	r25, r24
 2fe:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
 300:	95 b3       	in	r25, 0x15	; 21
 302:	89 23       	and	r24, r25
 304:	85 bb       	out	0x15, r24	; 21
			break;
 306:	b1 c0       	rjmp	.+354    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 308:	41 b3       	in	r20, 0x11	; 17
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_INITPIN+0xaa>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_INITPIN+0xa6>
 31a:	cb 01       	movw	r24, r22
 31c:	80 95       	com	r24
 31e:	94 2f       	mov	r25, r20
 320:	98 23       	and	r25, r24
 322:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
 324:	92 b3       	in	r25, 0x12	; 18
 326:	89 23       	and	r24, r25
 328:	82 bb       	out	0x12, r24	; 18
			break;
 32a:	9f c0       	rjmp	.+318    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		}
		break;
		
		case INPLUP:
		switch(PORT)
 32c:	91 30       	cpi	r25, 0x01	; 1
 32e:	c1 f0       	breq	.+48     	; 0x360 <DIO_INITPIN+0xf4>
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_INITPIN+0xd0>
 332:	92 30       	cpi	r25, 0x02	; 2
 334:	39 f1       	breq	.+78     	; 0x384 <DIO_INITPIN+0x118>
 336:	93 30       	cpi	r25, 0x03	; 3
 338:	b9 f1       	breq	.+110    	; 0x3a8 <DIO_INITPIN+0x13c>
 33a:	97 c0       	rjmp	.+302    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 33c:	4a b3       	in	r20, 0x1a	; 26
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_INITPIN+0xde>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_INITPIN+0xda>
 34e:	cb 01       	movw	r24, r22
 350:	96 2f       	mov	r25, r22
 352:	90 95       	com	r25
 354:	94 23       	and	r25, r20
 356:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
 358:	9b b3       	in	r25, 0x1b	; 27
 35a:	89 2b       	or	r24, r25
 35c:	8b bb       	out	0x1b, r24	; 27
			break;
 35e:	85 c0       	rjmp	.+266    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
 360:	47 b3       	in	r20, 0x17	; 23
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_INITPIN+0x102>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_INITPIN+0xfe>
 372:	cb 01       	movw	r24, r22
 374:	96 2f       	mov	r25, r22
 376:	90 95       	com	r25
 378:	94 23       	and	r25, r20
 37a:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
 37c:	98 b3       	in	r25, 0x18	; 24
 37e:	89 2b       	or	r24, r25
 380:	88 bb       	out	0x18, r24	; 24
			break;
 382:	73 c0       	rjmp	.+230    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 384:	44 b3       	in	r20, 0x14	; 20
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_INITPIN+0x126>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_INITPIN+0x122>
 396:	cb 01       	movw	r24, r22
 398:	96 2f       	mov	r25, r22
 39a:	90 95       	com	r25
 39c:	94 23       	and	r25, r20
 39e:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
 3a0:	95 b3       	in	r25, 0x15	; 21
 3a2:	89 2b       	or	r24, r25
 3a4:	85 bb       	out	0x15, r24	; 21
			break;
 3a6:	61 c0       	rjmp	.+194    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 3a8:	41 b3       	in	r20, 0x11	; 17
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_INITPIN+0x14a>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	8a 95       	dec	r24
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_INITPIN+0x146>
 3ba:	cb 01       	movw	r24, r22
 3bc:	96 2f       	mov	r25, r22
 3be:	90 95       	com	r25
 3c0:	94 23       	and	r25, r20
 3c2:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
 3c4:	92 b3       	in	r25, 0x12	; 18
 3c6:	89 2b       	or	r24, r25
 3c8:	82 bb       	out	0x12, r24	; 18
			break;
 3ca:	4f c0       	rjmp	.+158    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
 3cc:	91 30       	cpi	r25, 0x01	; 1
 3ce:	c1 f0       	breq	.+48     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d0:	28 f0       	brcs	.+10     	; 0x3dc <DIO_INITPIN+0x170>
 3d2:	92 30       	cpi	r25, 0x02	; 2
 3d4:	39 f1       	breq	.+78     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d6:	93 30       	cpi	r25, 0x03	; 3
 3d8:	b9 f1       	breq	.+110    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3da:	47 c0       	rjmp	.+142    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 3dc:	4b b3       	in	r20, 0x1b	; 27
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_INITPIN+0x17e>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_INITPIN+0x17a>
 3ee:	cb 01       	movw	r24, r22
 3f0:	96 2f       	mov	r25, r22
 3f2:	90 95       	com	r25
 3f4:	94 23       	and	r25, r20
 3f6:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
 3f8:	9a b3       	in	r25, 0x1a	; 26
 3fa:	89 2b       	or	r24, r25
 3fc:	8a bb       	out	0x1a, r24	; 26
			break;
 3fe:	35 c0       	rjmp	.+106    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
 400:	48 b3       	in	r20, 0x18	; 24
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	96 2f       	mov	r25, r22
 416:	90 95       	com	r25
 418:	94 23       	and	r25, r20
 41a:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
 41c:	97 b3       	in	r25, 0x17	; 23
 41e:	89 2b       	or	r24, r25
 420:	87 bb       	out	0x17, r24	; 23
			break;
 422:	23 c0       	rjmp	.+70     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PC:
			clear_bit(PORTC,PIN_NUM);
 424:	45 b3       	in	r20, 0x15	; 21
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	96 2f       	mov	r25, r22
 43a:	90 95       	com	r25
 43c:	94 23       	and	r25, r20
 43e:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
 440:	94 b3       	in	r25, 0x14	; 20
 442:	89 2b       	or	r24, r25
 444:	84 bb       	out	0x14, r24	; 20
			break;
 446:	11 c0       	rjmp	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

			case PD:
			clear_bit(PORTD,PIN_NUM);
 448:	42 b3       	in	r20, 0x12	; 18
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	cb 01       	movw	r24, r22
 45c:	96 2f       	mov	r25, r22
 45e:	90 95       	com	r25
 460:	94 23       	and	r25, r20
 462:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
 464:	91 b3       	in	r25, 0x11	; 17
 466:	89 2b       	or	r24, r25
 468:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
 46a:	08 95       	ret
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	08 95       	ret

00000470 <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
 470:	98 2f       	mov	r25, r24
 472:	96 95       	lsr	r25
 474:	96 95       	lsr	r25
 476:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
 478:	95 30       	cpi	r25, 0x05	; 5
 47a:	08 f0       	brcs	.+2      	; 0x47e <DIO_WRITEPIN+0xe>
 47c:	8e c0       	rjmp	.+284    	; 0x59a <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
 47e:	63 30       	cpi	r22, 0x03	; 3
 480:	08 f0       	brcs	.+2      	; 0x484 <DIO_WRITEPIN+0x14>
 482:	8d c0       	rjmp	.+282    	; 0x59e <DIO_WRITEPIN+0x12e>
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
 484:	87 70       	andi	r24, 0x07	; 7
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
 486:	61 30       	cpi	r22, 0x01	; 1
 488:	09 f0       	breq	.+2      	; 0x48c <DIO_WRITEPIN+0x1c>
 48a:	40 c0       	rjmp	.+128    	; 0x50c <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
 48c:	91 30       	cpi	r25, 0x01	; 1
 48e:	a1 f0       	breq	.+40     	; 0x4b8 <DIO_WRITEPIN+0x48>
 490:	28 f0       	brcs	.+10     	; 0x49c <DIO_WRITEPIN+0x2c>
 492:	92 30       	cpi	r25, 0x02	; 2
 494:	f9 f0       	breq	.+62     	; 0x4d4 <DIO_WRITEPIN+0x64>
 496:	93 30       	cpi	r25, 0x03	; 3
 498:	59 f1       	breq	.+86     	; 0x4f0 <DIO_WRITEPIN+0x80>
 49a:	83 c0       	rjmp	.+262    	; 0x5a2 <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
 49c:	4b b3       	in	r20, 0x1b	; 27
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	b9 01       	movw	r22, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_WRITEPIN+0x3a>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	8a 95       	dec	r24
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_WRITEPIN+0x36>
 4ae:	cb 01       	movw	r24, r22
 4b0:	84 2b       	or	r24, r20
 4b2:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
 4b6:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
 4b8:	48 b3       	in	r20, 0x18	; 24
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_WRITEPIN+0x56>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_WRITEPIN+0x52>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
 4d2:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
 4d4:	45 b3       	in	r20, 0x15	; 21
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	b9 01       	movw	r22, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_WRITEPIN+0x72>
 4de:	66 0f       	add	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	8a 95       	dec	r24
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_WRITEPIN+0x6e>
 4e6:	cb 01       	movw	r24, r22
 4e8:	84 2b       	or	r24, r20
 4ea:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
 4ee:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
 4f0:	42 b3       	in	r20, 0x12	; 18
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_WRITEPIN+0x8e>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_WRITEPIN+0x8a>
 502:	cb 01       	movw	r24, r22
 504:	84 2b       	or	r24, r20
 506:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 508:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
 50a:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
 50c:	61 11       	cpse	r22, r1
 50e:	44 c0       	rjmp	.+136    	; 0x598 <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
 510:	91 30       	cpi	r25, 0x01	; 1
 512:	a9 f0       	breq	.+42     	; 0x53e <DIO_WRITEPIN+0xce>
 514:	28 f0       	brcs	.+10     	; 0x520 <DIO_WRITEPIN+0xb0>
 516:	92 30       	cpi	r25, 0x02	; 2
 518:	09 f1       	breq	.+66     	; 0x55c <DIO_WRITEPIN+0xec>
 51a:	93 30       	cpi	r25, 0x03	; 3
 51c:	71 f1       	breq	.+92     	; 0x57a <DIO_WRITEPIN+0x10a>
 51e:	43 c0       	rjmp	.+134    	; 0x5a6 <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 520:	4b b3       	in	r20, 0x1b	; 27
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b9 01       	movw	r22, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_WRITEPIN+0xbe>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_WRITEPIN+0xba>
 532:	cb 01       	movw	r24, r22
 534:	80 95       	com	r24
 536:	84 23       	and	r24, r20
 538:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 53a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
 53c:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
 53e:	48 b3       	in	r20, 0x18	; 24
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_WRITEPIN+0xdc>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_WRITEPIN+0xd8>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 558:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
 55a:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
 55c:	45 b3       	in	r20, 0x15	; 21
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_WRITEPIN+0xfa>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_WRITEPIN+0xf6>
 56e:	cb 01       	movw	r24, r22
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 576:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
 578:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
 57a:	42 b3       	in	r20, 0x12	; 18
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_WRITEPIN+0x118>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_WRITEPIN+0x114>
 58c:	cb 01       	movw	r24, r22
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 594:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
 596:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
 598:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 5a6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
 5a8:	08 95       	ret

000005aa <EXI_Enable>:
		clear_bit(GICR,INT1); break;
		case EX_INT2:
		clear_bit(GICR,INT2); break;
	}
	
}
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	41 f0       	breq	.+16     	; 0x5be <EXI_Enable+0x14>
 5ae:	18 f0       	brcs	.+6      	; 0x5b6 <EXI_Enable+0xc>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	49 f0       	breq	.+18     	; 0x5c6 <EXI_Enable+0x1c>
 5b4:	08 95       	ret
 5b6:	8b b7       	in	r24, 0x3b	; 59
 5b8:	80 64       	ori	r24, 0x40	; 64
 5ba:	8b bf       	out	0x3b, r24	; 59
 5bc:	08 95       	ret
 5be:	8b b7       	in	r24, 0x3b	; 59
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	8b bf       	out	0x3b, r24	; 59
 5c4:	08 95       	ret
 5c6:	8b b7       	in	r24, 0x3b	; 59
 5c8:	80 62       	ori	r24, 0x20	; 32
 5ca:	8b bf       	out	0x3b, r24	; 59
 5cc:	08 95       	ret

000005ce <EXI_TriggerEdge>:
INTERRUPT_ERROR_TYPE EXI_TriggerEdge (EXInterruptSource_type interrupt, TriggerEdge_type edge )
{

	switch(interrupt)
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	49 f1       	breq	.+82     	; 0x624 <EXI_TriggerEdge+0x56>
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <EXI_TriggerEdge+0xe>
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	09 f4       	brne	.+2      	; 0x5da <EXI_TriggerEdge+0xc>
 5d8:	49 c0       	rjmp	.+146    	; 0x66c <EXI_TriggerEdge+0x9e>
 5da:	08 95       	ret
	{
		case EX_INT0:
		switch(edge)
 5dc:	61 30       	cpi	r22, 0x01	; 1
 5de:	69 f0       	breq	.+26     	; 0x5fa <EXI_TriggerEdge+0x2c>
 5e0:	28 f0       	brcs	.+10     	; 0x5ec <EXI_TriggerEdge+0x1e>
 5e2:	62 30       	cpi	r22, 0x02	; 2
 5e4:	89 f0       	breq	.+34     	; 0x608 <EXI_TriggerEdge+0x3a>
 5e6:	63 30       	cpi	r22, 0x03	; 3
 5e8:	b1 f0       	breq	.+44     	; 0x616 <EXI_TriggerEdge+0x48>
 5ea:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
 5ec:	85 b7       	in	r24, 0x35	; 53
 5ee:	8e 7f       	andi	r24, 0xFE	; 254
 5f0:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
 5f2:	85 b7       	in	r24, 0x35	; 53
 5f4:	8d 7f       	andi	r24, 0xFD	; 253
 5f6:	85 bf       	out	0x35, r24	; 53
			break;
 5f8:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
 5fa:	85 b7       	in	r24, 0x35	; 53
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01); 
 600:	85 b7       	in	r24, 0x35	; 53
 602:	8d 7f       	andi	r24, 0xFD	; 253
 604:	85 bf       	out	0x35, r24	; 53
			break;
 606:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
 608:	85 b7       	in	r24, 0x35	; 53
 60a:	8e 7f       	andi	r24, 0xFE	; 254
 60c:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	82 60       	ori	r24, 0x02	; 2
 612:	85 bf       	out	0x35, r24	; 53
			 break;
 614:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
 616:	85 b7       	in	r24, 0x35	; 53
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
 61c:	85 b7       	in	r24, 0x35	; 53
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	85 bf       	out	0x35, r24	; 53
			 break;
 622:	08 95       	ret
		}
		break;
		case EX_INT1:
		switch(edge)
 624:	61 30       	cpi	r22, 0x01	; 1
 626:	69 f0       	breq	.+26     	; 0x642 <EXI_TriggerEdge+0x74>
 628:	28 f0       	brcs	.+10     	; 0x634 <EXI_TriggerEdge+0x66>
 62a:	62 30       	cpi	r22, 0x02	; 2
 62c:	89 f0       	breq	.+34     	; 0x650 <EXI_TriggerEdge+0x82>
 62e:	63 30       	cpi	r22, 0x03	; 3
 630:	b1 f0       	breq	.+44     	; 0x65e <EXI_TriggerEdge+0x90>
 632:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
 634:	85 b7       	in	r24, 0x35	; 53
 636:	8b 7f       	andi	r24, 0xFB	; 251
 638:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
 63a:	85 b7       	in	r24, 0x35	; 53
 63c:	87 7f       	andi	r24, 0xF7	; 247
 63e:	85 bf       	out	0x35, r24	; 53
 640:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
 642:	85 b7       	in	r24, 0x35	; 53
 644:	84 60       	ori	r24, 0x04	; 4
 646:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
 648:	85 b7       	in	r24, 0x35	; 53
 64a:	87 7f       	andi	r24, 0xF7	; 247
 64c:	85 bf       	out	0x35, r24	; 53
 64e:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
 650:	85 b7       	in	r24, 0x35	; 53
 652:	8b 7f       	andi	r24, 0xFB	; 251
 654:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
 656:	85 b7       	in	r24, 0x35	; 53
 658:	88 60       	ori	r24, 0x08	; 8
 65a:	85 bf       	out	0x35, r24	; 53
 65c:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
 65e:	85 b7       	in	r24, 0x35	; 53
 660:	84 60       	ori	r24, 0x04	; 4
 662:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
 664:	85 b7       	in	r24, 0x35	; 53
 666:	88 60       	ori	r24, 0x08	; 8
 668:	85 bf       	out	0x35, r24	; 53
 66a:	08 95       	ret
		}
		break;
		case EX_INT2:
		switch(edge)
 66c:	62 30       	cpi	r22, 0x02	; 2
 66e:	19 f0       	breq	.+6      	; 0x676 <EXI_TriggerEdge+0xa8>
 670:	63 30       	cpi	r22, 0x03	; 3
 672:	29 f0       	breq	.+10     	; 0x67e <EXI_TriggerEdge+0xb0>
 674:	08 95       	ret
			break;
			case  ANY_LOGIC_CHANGE:
		 /*DO nothing OR set default */
			break;
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
 676:	84 b7       	in	r24, 0x34	; 52
 678:	8f 7b       	andi	r24, 0xBF	; 191
 67a:	84 bf       	out	0x34, r24	; 52
			 break;
 67c:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2); 
 67e:	84 b7       	in	r24, 0x34	; 52
 680:	80 64       	ori	r24, 0x40	; 64
 682:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
	
}
 684:	08 95       	ret

00000686 <_exit>:
 686:	f8 94       	cli

00000688 <__stop_program>:
 688:	ff cf       	rjmp	.-2      	; 0x688 <__stop_program>
